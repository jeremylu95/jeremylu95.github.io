<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MarkDown练习笔记</title>
    <url>/2020/06/12/first_blog/</url>
    <content><![CDATA[<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><blockquote>
<p>有一种爱情是一触即发。看到Typora的第一眼，我就爱上了它。它没有专业软件那么复杂而难以上手的功能，却也没有为了简洁而妥协到难以使用，它的每一寸肌肤都恰到好处，与它相处的每一刻都十分愉悦。</p>
</blockquote>
 <a id="more"></a> 

<h3 id="Java代码块"><a href="#Java代码块" class="headerlink" title="Java代码块"></a>Java代码块</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="无序列表（减号-空格）"><a href="#无序列表（减号-空格）" class="headerlink" title="无序列表（减号+空格）"></a>无序列表（减号+空格）</h3><ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表</li>
</ul>
<h3 id="有序列表（数字-英文句号-空格）"><a href="#有序列表（数字-英文句号-空格）" class="headerlink" title="有序列表（数字+英文句号+空格）"></a>有序列表（数字+英文句号+空格）</h3><ol>
<li><p>有序列表</p>
</li>
<li><p>有序列表</p>
</li>
<li><p>有序列表</p>
</li>
</ol>
<h3 id="插入图片：感叹号-加载失败时显示文字-（图片链接）"><a href="#插入图片：感叹号-加载失败时显示文字-（图片链接）" class="headerlink" title="插入图片：感叹号+[加载失败时显示文字]+（图片链接）"></a>插入图片：感叹号+[加载失败时显示文字]+（图片链接）</h3><p>![喵] (<a href="http://img1.imgtn.bdimg.com/it/u=1141259048,554497535&amp;fm=26&amp;gp=0.jpg" target="_blank" rel="noopener">http://img1.imgtn.bdimg.com/it/u=1141259048,554497535&amp;fm=26&amp;gp=0.jpg</a>)</p>
<h3 id="插入超链接：-超链接显示名-（网页链接）"><a href="#插入超链接：-超链接显示名-（网页链接）" class="headerlink" title="插入超链接：[超链接显示名]+（网页链接）"></a>插入超链接：[超链接显示名]+（网页链接）</h3><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p>
<h3 id="字体倾斜、加粗、倾斜加粗"><a href="#字体倾斜、加粗、倾斜加粗" class="headerlink" title="字体倾斜、加粗、倾斜加粗"></a>字体倾斜、加粗、倾斜加粗</h3><p><em>倾斜</em></p>
<p><strong>加粗</strong></p>
<p><strong><em>倾斜加粗</em></strong></p>
<h3 id="分割线-（-或—）"><a href="#分割线-（-或—）" class="headerlink" title="分割线 （*** 或—）"></a>分割线 （*** 或—）</h3><hr>
<hr>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="利用html修改字体样式"><a href="#利用html修改字体样式" class="headerlink" title="利用html修改字体样式"></a>利用html修改字体样式</h3><center><font face="黑体" color="red" size="15">字体样式、颜色、大小、位置修改</font></center>
<p align="center">段落居中</p>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-Markdown -share</tag>
      </tags>
  </entry>
  <entry>
    <title>前端知识</title>
    <url>/2020/06/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<hr>
<h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><h3 id="Html中，空格有专门的编码，输入-amp-nbsp代表一个空格"><a href="#Html中，空格有专门的编码，输入-amp-nbsp代表一个空格" class="headerlink" title="Html中，空格有专门的编码，输入&amp;nbsp代表一个空格"></a>Html中，空格有专门的编码，输入&amp;nbsp代表一个空格</h3>]]></content>
  </entry>
  <entry>
    <title>Hello Qf</title>
    <url>/2020/06/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h3><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JAVA基础知识</title>
    <url>/2020/06/14/JAVA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>急着赶路，会错过沿途的风景，<br>放慢脚步，享受成长的每一步。</p>
</blockquote>
<hr>
<h3 id="1、Java语言简介"><a href="#1、Java语言简介" class="headerlink" title="1、Java语言简介"></a>1、Java语言简介</h3><p>Sun公司于1995年研发Java，创始人之一是被喻为Java之父的James Gosling（詹姆斯·高斯林）。2009年，Sun公司被Oracle（甲骨文）公司收购，Java的官网也随之更改为<a href="http://www.oracle.com" target="_blank" rel="noopener">www.oracle.com</a></p>
<p>Java语言的核心优势是允许跨平台使用。其原理是利用Java编辑器将文件编译成与平台无关的字节码文件（后缀为.class），然后通过在不同的操作系统上安装相应的Java虚拟机（JVM），从而使Java能顺利的在多种平台顺利运行。简而言之，一次编译，多处使用。</p>
<a id="more"></a>

<p>Java最初版本为Java 1.0，发展到1.5时有了重大的更新，进入发展快车道，因此更名为Java 5.0。尽管现在Java版本已经到了Java 13，但版本过高会加大客户的使用成本，为了方便客户使用，目前大多数企业以Java 8.0为主，因为Java 8.0更新了许多新的特性，处于承上启下的版本。不过，目前学习阶段，推荐以Java 11为主。 </p>
<p>JDK为JAVA开发环境，JRE为Java运行环境，JVM为Java虚拟机</p>
<hr>
<h3 id="2、【练习】-Hello-World"><a href="#2、【练习】-Hello-World" class="headerlink" title="2、【练习】    Hello World"></a>2、【练习】    Hello World</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//入门经典程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintHelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<!--more-->

<h3 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h3><p>注释是用来解释代码，生成字节码文件时会被抛弃。合理使用注释，能够提升代码的可读性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	三种注释的使用方式：</span></span><br><span class="line"><span class="comment">//	单行注释</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/*	多行注释	*/</span>	</span><br><span class="line"><span class="keyword">int</span> num <span class="comment">/*	多行注释，可在代码间使用，但很少这么用  */</span>= <span class="number">10</span>;    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**	文档注释，用于生成API	*/</span></span><br></pre></td></tr></table></figure>



<hr>
<h3 id="4、标识符"><a href="#4、标识符" class="headerlink" title="4、标识符"></a>4、标识符</h3><h4 id="【常见骆驼的关键组成部分是大小两驼峰】"><a href="#【常见骆驼的关键组成部分是大小两驼峰】" class="headerlink" title="【常见骆驼的关键组成部分是大小两驼峰】"></a>【常见骆驼的关键组成部分是大小两驼峰】</h4> <!-- more --> 

<img src="F:\code\hexo\图片存储\骆驼.jpg" alt="骆驼" style="zoom:50%;" />

<ol>
<li><p>常：常量名所有字母大写，字母与字母间用_分隔</p>
</li>
<li><p>见：标识符命名时尽可能见名知义</p>
</li>
<li><p>关键：标识符不能以JAVA保留的关键字命名(Java总共五十关键字不需要刻意去背，）</p>
</li>
<li><p>组成：由字母、数字、下划线_、美元符号$组成，需注意不能以数字开头</p>
</li>
<li><p>大小：标识符区分大小写，如Cat 和 cat代表不同的标识符</p>
</li>
<li><p>大驼峰原则：【类名】每个单词首字母均大写，其余字母小写</p>
</li>
<li><p>小驼峰原则：【变量、方法名】第一个单词全小写，从第二个单词开始，首字母大写，其余字母小写</p>
</li>
</ol>
<hr>
<h3 id="5、Java关键字"><a href="#5、Java关键字" class="headerlink" title="5、Java关键字"></a>5、Java关键字</h3><p>关键字是具有特殊含义的字母，其中true、false、null为含有特殊含义的标记，goto、const是Java中未使用到的关键字。关键字不需要刻意去计，使用多了自然会记得。</p>
<p>常用关键字：</p>
<img src="C:\Users\xy\AppData\Roaming\Typora\typora-user-images\image-20200613193035488.png" alt="常用关键字" style="zoom:50%;" />

<p>所有关键字：</p>
<p><img src="F:%5Ccode%5Chexo%5C%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%5C%E6%89%80%E6%9C%89%E5%85%B3%E9%94%AE%E5%AD%97.jpg" alt="所有关键字"></p>
<hr>
<h3 id="6、数据类型"><a href="#6、数据类型" class="headerlink" title="6、数据类型"></a>6、数据类型</h3><p>基本数据类型遵循值传递，传递的是值的副本。引用数据类型也遵循值传递，但传递的是值的地址。</p>
<p><img src="F:%5Ccode%5Chexo%5C%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%5C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="数据类型"></p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200613194819568.png" alt="取值范围"></p>
<hr>
<h3 id="7、数据类型的转换（自动or强制）"><a href="#7、数据类型的转换（自动or强制）" class="headerlink" title="7、数据类型的转换（自动or强制）"></a>7、数据类型的转换（自动or强制）</h3><p>自动转换：容量小的数据类型，会自动转换成容量大的数据类型。</p>
<p>强制转换：容量大的数据类型，不会自动转换成容量小的数据类型，需要进行强制转换，但是强制转换会可能会导致数据丢失。<img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200613195333387.png" alt="image-20200613195333387"></p>
<p>注意事项：</p>
<ul>
<li>若无特别说明，整数默认为int类型；</li>
<li>若无特别说明，小数默认为double类型；</li>
<li>字符char参与计算时，会自动转换成该字符对应的ASCII码，如’a’对应97。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强制转换</span></span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>) <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">1.0F</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = (<span class="keyword">float</span>)<span class="number">1.0</span>;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="8、常量与变量的区别"><a href="#8、常量与变量的区别" class="headerlink" title="8、常量与变量的区别"></a>8、常量与变量的区别</h3><p>常量：由public static final修饰，只能赋值一次，在程序运行过程中不会发生改变。</p>
<p>变量：由private、default、protected、public修饰，能够进行多次赋值，在程序运行过程中可以发生改变。</p>
<p>变量的三种赋值方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//核心： 数据类型 变量名 = 值;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1：定义并赋值</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2：先定义，后赋值</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3：同时定义多个（不常用）</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>,d = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="9、变量的作用域"><a href="#9、变量的作用域" class="headerlink" title="9、变量的作用域"></a>9、变量的作用域</h3><ol>
<li>局部变量：在方法或语句块中定义的变量，其作用域为该方法或语句块内。必须先声明、赋值后使用。</li>
<li>成员变量（实例变量）：方法外部、类的内部定义的变量，其作用域为整个对象。若没有进行赋值，会自动初始化为默认值。（默认值：int为0、double为0.0、char为‘\u0000’ 、boolean为false)</li>
<li>静态变量：以static 修饰的变量，定义在类中，存放于堆的方法区里，作用域从类的加载到类的卸载。</li>
</ol>
<img src="C:\Users\xy\AppData\Roaming\Typora\typora-user-images\image-20200615113000607.png" alt="image-20200615113000607" style="zoom: 50%;" />



<hr>
<h3 id="10、访问控制符"><a href="#10、访问控制符" class="headerlink" title="10、访问控制符"></a>10、访问控制符</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200613101742851.png" alt="image-20200613101742851"></h3><hr>
<h3 id="11、运算符"><a href="#11、运算符" class="headerlink" title="11、运算符"></a>11、运算符</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h4><img src="C:\Users\xy\AppData\Roaming\Typora\typora-user-images\image-20200614201912842.png" alt="image-20200614201912842" style="zoom:50%;" />

<h4 id="知识点"><a href="#知识点" class="headerlink" title="知识点:"></a>知识点:</h4><ol>
<li><p>与String类型进行+操作，最终会得到一个字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.print(<span class="number">1</span>+<span class="number">2</span>+<span class="string">"a"</span>); <span class="comment">// "3a"</span></span><br><span class="line">System.out.print(<span class="number">1</span>+<span class="string">"a"</span>+<span class="number">2</span>); <span class="comment">// "1a2"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>条件运算符是    ==    ，使用时注意不要写成    =</p>
</li>
<li><p>XX运算符连接的表达式就叫XX表达式</p>
</li>
<li><p>逻辑运算符一般使用&amp;&amp;（短路与、双与）和||（短路或，双或），很少使用&amp;（逻辑与）和|（逻辑或）。因为逻辑与和逻辑或能够运算提升效率。</p>
<p><img src="F:%5Ccode%5Chexo%5C%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%5C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="逻辑运算符"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 逻辑表达式1 &amp;&amp; 逻辑表达式2		只要表达式1为false，整体的结果为false，表达式2会直接被忽略。</span></span><br><span class="line"><span class="comment">// 逻辑表达式1 || 逻辑表达式2		只要表达式1为true，整体的结果为true，表达式2会直接被忽略。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展的赋值运算符隐含了强制转换</p>
<img src="F:\code\hexo\图片存储\扩展赋值运算符.png" alt="扩展赋值运算符" style="zoom:50%;" />

</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s1 = <span class="number">1</span>;</span><br><span class="line">s1 += <span class="number">1</span>;	<span class="comment">//正常输出（推荐写法）</span></span><br><span class="line"></span><br><span class="line">s2 = s2 + <span class="number">1</span>;	<span class="comment">//会报错，因为1默认为int类型，需手动进行强制转换</span></span><br><span class="line">s2 = (<span class="keyword">byte</span>)(s2 + <span class="number">1</span>)	<span class="comment">//虽然不会报错，但强制转换可能导致数据丢失，一般不建议这么写</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>自增自减运算符(++    –)所在的位置需要特别注意：</p>
<p>a. 若自增自减在前，先+1或-1，再参与运算。</p>
<p>b. 若自增自减在后，先参与运算，再+1或-1。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextAddAdd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">        a = b++;    <span class="comment">//	b先赋值给a，然后b再加1</span></span><br><span class="line">        System.out.println(a);  <span class="comment">//  1</span></span><br><span class="line">        System.out.println(b);  <span class="comment">//  2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">1</span>;</span><br><span class="line">        c = ++d;    <span class="comment">//	d先加1，然后赋值给c</span></span><br><span class="line">        System.out.println(c);  <span class="comment">//  2</span></span><br><span class="line">        System.out.println(d);  <span class="comment">//  2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>三元运算符使用时必须有值返回</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">System.out.println(a &gt; b ? <span class="string">'a'</span> : <span class="string">'b'</span>);	<span class="comment">//	b</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>位运算符：左移&lt;&lt;1位，相当于乘以2；右移1位，相当于除以2</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Text</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">16</span> &lt;&lt; <span class="number">1</span>;     <span class="comment">//  32</span></span><br><span class="line">        System.out.println(left);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">16</span> &gt;&gt; <span class="number">1</span>;    <span class="comment">//  8</span></span><br><span class="line">        System.out.println(right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="12、流程控制语句"><a href="#12、流程控制语句" class="headerlink" title="12、流程控制语句"></a>12、流程控制语句</h3><p>流程控制语句分为：顺序结构、选择结构、循环结构。</p>
<h4 id="顺序结构："><a href="#顺序结构：" class="headerlink" title="顺序结构："></a>顺序结构：</h4><p>程序从main方法开始，从上到下逐条运行。</p>
<h4 id="选择结构（分支结构）："><a href="#选择结构（分支结构）：" class="headerlink" title="选择结构（分支结构）："></a>选择结构（分支结构）：</h4><p>选择语句包含if语句和switch语句。if语句适合区间判断、switch适合多值判断。switch语句需要注意case穿透问题，case穿透是指两个case语句之间没有用break；返回，导致两个case都被执行。</p>
<p>if语句：    if        if…else…        if…else if…else…            </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextIf</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> month = random.nextInt(<span class="number">11</span>) + <span class="number">1</span>; <span class="comment">//返回1到12的随机数</span></span><br><span class="line">        System.out.print(month + <span class="string">"月 "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (month &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第一季度"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month &lt;= <span class="number">6</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第二季度"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (month &lt;= <span class="number">9</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第三季度"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"第四季度"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>swith语句:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextSwitch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> month = <span class="number">1</span>; month &lt;= <span class="number">12</span>; month++) &#123;</span><br><span class="line">            System.out.print(month + <span class="string">"月:"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">"春季"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    System.out.println(<span class="string">"夏季"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                    System.out.println(<span class="string">"秋季"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">"冬季"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(<span class="string">"月份有误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="循环结构："><a href="#循环结构：" class="headerlink" title="循环结构："></a>循环结构：</h4><ul>
<li><p>循环语句包含for语句、while语句、do while语句。</p>
</li>
<li><p>使用循环语句时，可结合break和continue提前结束循环。break是结束整个循环，continue是结束本次循环</p>
</li>
<li><p>for语句和while语句先判断，再执行循环语句体，do while先执行循环语句体，再进行判断，而且do while语句是以}；结束，需要特别留意。实际开发中，do while不常用。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextCirculation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//	for循环打印0到9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//	while循环打印0到9</span></span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (num1 &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(num1);</span><br><span class="line">            num1++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//	do while循环打印0到9</span></span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(num2);</span><br><span class="line">            num2++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (num2 &lt; <span class="number">10</span>);	<span class="comment">//此处;不可省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="13、方法"><a href="#13、方法" class="headerlink" title="13、方法"></a>13、方法</h3><h4 id="什么是方法？"><a href="#什么是方法？" class="headerlink" title="什么是方法？"></a>什么是方法？</h4><p>方法是实现特定功能的代码片段。若定义方法时用static修饰，则为静态方法，若无static修饰，则为成员方法。</p>
<h4 id="方法的定义与调用"><a href="#方法的定义与调用" class="headerlink" title="方法的定义与调用"></a>方法的定义与调用</h4><ul>
<li>定义方法时，需明确返回值类型、明确参数列表（形参的数据类型、形参的个数）</li>
<li>方法体中的返回值类型需要与方法定义时的返回值类型一致</li>
<li>若方法无返回值（void），return可省略不写，此时系统中会隐含return</li>
<li>return有两个作用：一是将值返回，二是结束方法。</li>
<li>以【方法名（实参）；】的形式调用方法， 调用时会将实参的值传递给形参，再进行计算。</li>
<li>形参是形式参数，实参是实际传入的参数。</li>
<li>方法不允许嵌套！</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[修饰符]	返回值数据类型	方法名(形参列表)&#123;	方法体	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getSum(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;	<span class="comment">//此处用了static修饰，属于静态方法</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方法与语句块的区别"><a href="#方法与语句块的区别" class="headerlink" title="方法与语句块的区别"></a>方法与语句块的区别</h4><p>方法有名称有返回值，可多次调用。语句块没有名称，无法多次调用。</p>
<h4 id="方法重载的条件"><a href="#方法重载的条件" class="headerlink" title="方法重载的条件"></a>方法重载的条件</h4><ul>
<li>在同一个类中，方法名相同、形参列表（形参数量、形参数据类型）不同即为重载的方法</li>
<li>只有返回值类型不同，不算重载的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getSum(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//方法名相同，形参数量不同，是重载的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;		</span><br><span class="line">        <span class="keyword">return</span> a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//方法名相同，形参数据类型不同，是重载的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSum</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有返回数据类型不同，不是重载的方法</span></span><br><span class="line"><span class="comment">//    public static double getSum(int a, int b) &#123;</span></span><br><span class="line"><span class="comment">//        return a + b;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="14、类"><a href="#14、类" class="headerlink" title="14、类"></a>14、类</h3><h4 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h4><p>类是对相同事物的抽象描述。类中有属性（成员变量）和行为（成员方法），注意描述时不要说类的属性、类的行为，要说类的成员变量、类的成员方法。</p>
<h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[修饰符] class 类名&#123;</span></span><br><span class="line"><span class="comment">    成员变量定义：[修饰符] 数据类型 成员变量名;</span></span><br><span class="line"><span class="comment">    成员方法定义：[修饰符] 返回值数据类型 成员方法名(形参列表)&#123;方法体&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    String name = <span class="string">"浅枫"</span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学会学习再学习"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">practise</span><span class="params">(<span class="keyword">boolean</span> ifKeep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ifKeep) &#123;</span><br><span class="line">            System.out.println(<span class="string">"坚持练习实现自我反馈，慢慢积累经验，提升能力"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"根据记忆曲线，慢慢遗忘，能力得不到提升"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h4><p>类是对象的抽象（描述）、对象是类的实体（实例）。</p>
<p>单纯的类是没有意义的，需要通过创建对象，进一步实现。</p>
<h4 id="成员变量、成员方法的调用"><a href="#成员变量、成员方法的调用" class="headerlink" title="成员变量、成员方法的调用"></a>成员变量、成员方法的调用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要点1：使用类的成员变量、成员方法前，必须先创建对象。创建格式： 类名 对象名 = new 类名（实参）;</span></span><br><span class="line"><span class="comment">要点2：通过 对象名.成员变量名 调用对象的变量</span></span><br><span class="line"><span class="comment">要点3：通过 对象名.方法名() 调用对象的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(s.name); <span class="comment">//浅枫</span></span><br><span class="line">        System.out.println(s.age); <span class="comment">//24</span></span><br><span class="line"></span><br><span class="line">        s.study(); <span class="comment">//学会学习再学习</span></span><br><span class="line">        s.practise(<span class="keyword">true</span>); <span class="comment">//坚持练习实现自我反馈，慢慢积累经验，提升能力</span></span><br><span class="line">        s.practise(<span class="keyword">false</span>); <span class="comment">//根据记忆曲线，慢慢遗忘，能力得不到提升</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="类的set-get方法、this关键字"><a href="#类的set-get方法、this关键字" class="headerlink" title="类的set/get方法、this关键字"></a>类的set/get方法、this关键字</h4><p>核心:</p>
<ol>
<li>通过private将成员变量私有，这样其他类无法【直接】修改和获取该变量，使得程序更加安全。此外，还需要提供set/get方法，外部的类可以通过set/get方法【间接】修改和获取该变量。</li>
<li>this关键字<ul>
<li>this关键字只存在于成员方法中，成员方法是没有被static修饰的方法</li>
<li>变量的访问，先找局部变量，局部变量找不到，才找成员变量</li>
<li>this的主要作用是区分方法的局部变量和成员变量</li>
<li>this指代的是已经创建好的对象的成员变量，哪个对象调用了该方法，this就指代哪个对象。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextSetAndGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.setName(<span class="string">"蓝喵"</span>);</span><br><span class="line">        System.out.println(<span class="string">"昵称:"</span> + cat.getName()); <span class="comment">//昵称:蓝喵</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;	<span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="15、【练习】-Scanner类的使用"><a href="#15、【练习】-Scanner类的使用" class="headerlink" title="15、【练习】    Scanner类的使用"></a>15、【练习】    Scanner类的使用</h3><p>Scanner类中定义了多种可以获取键盘输入数据的方法，使用前需要导入    java.util.Scanner    包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextScanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"请输入一个数值："</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);	<span class="comment">//创建Scanner类的对象sc</span></span><br><span class="line">        <span class="keyword">int</span> num = sc.nextInt(); 	<span class="comment">//通过nextInt()方法获取键盘输入的值，比如10</span></span><br><span class="line">        System.out.println(num);	<span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="16、【练习】-Random类的使用"><a href="#16、【练习】-Random类的使用" class="headerlink" title="16、【练习】    Random类的使用"></a>16、【练习】    Random类的使用</h3><p>Random类中定义了可以生成随机数的方法，使用前需要导入    java.util.Random    包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TextRound</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();	<span class="comment">//创建Random类的对象random</span></span><br><span class="line">        <span class="keyword">int</span> num = random.nextInt(<span class="number">10</span>);	<span class="comment">//通过nextInt()返回[0,10)之间的随机整数</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="17、（待整理）数组"><a href="#17、（待整理）数组" class="headerlink" title="17、（待整理）数组"></a>17、（待整理）数组</h3><h3 id="18、（待整理）IDEA安装、环境变量配置"><a href="#18、（待整理）IDEA安装、环境变量配置" class="headerlink" title="18、（待整理）IDEA安装、环境变量配置"></a>18、（待整理）IDEA安装、环境变量配置</h3><h3 id="19、（待整理）Debug"><a href="#19、（待整理）Debug" class="headerlink" title="19、（待整理）Debug"></a>19、（待整理）Debug</h3><p>封装、继承、多态是对象的三大特征</p>
<p>封装原则，private  set/get</p>
<p>提高安全性</p>
<p>提高复用性</p>
<p>无参构造方法和有参构造方法</p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200615170910934.png" alt="image-20200615170910934"></p>
<p>标准类的制作</p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200615172658656.png" alt="image-20200615172658656"></p>
<p>增加断点、运行断点、步进、停止Debug、删除断点、批量删除断点</p>
<p>光标停留在某一行，代表该行即将执行Debug，需要再按一次步进才会执行</p>
<p>Debug模式可以清晰的看到循环的过程</p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614094319604.png" alt="image-20200614094319604"></p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614095707278.png" alt="image-20200614095707278"></p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614195128720.png" alt="image-20200614195128720"></p>
<p>Debug模块运行时，正在运行的方法会出现在预览区</p>
<p>手动导包</p>
<p>快捷键导包alt + enter </p>
<p>自动导包</p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614142113299.png" alt="image-20200614142113299"></p>
<p>IDEA小技巧</p>
<p>Alt + Ins 快速生成构造方法</p>
<p><img src="C:%5CUsers%5Cxy%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614085954220.png" alt="image-20200614085954220"></p>
<p><img src="C:%5CUsers%5Cxy%5CDesktop%5C%E5%9B%BE%E7%89%872.png" alt="图片2"></p>
<p>new Round. 自动创建方法</p>
<p>待实现功能：</p>
<ol>
<li><p>通过数组绘制基础图案：如爱心、星星。</p>
<p>初步思路：初始化一个数组，结合for循环，根据一定的规律进行替换，从而形成指定的图案。</p>
</li>
</ol>
]]></content>
  </entry>
</search>
