<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.1 Java概述 </title>
    <url>/2020/06/22/1.1%20Java%E6%A6%82%E8%BF%B0%20/</url>
    <content><![CDATA[<h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h2><h3 id="1-1-Java语言发展史（了解）"><a href="#1-1-Java语言发展史（了解）" class="headerlink" title="1.1 Java语言发展史（了解）"></a>1.1 Java语言发展史（了解）</h3><p>语言：人与人交流沟通的表达方式<br>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言<br>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言 Java之父：詹姆斯·高斯林（James Gosling） 2009年，Sun公司被甲骨文公司收购，所以我们现在访问oracle官网即可：<a href="https://www.oracle.com" target="_blank" rel="noopener">https://www.oracle.com</a><br>当前，我们课程使用的JDK版本：11.0 </p>
<h3 id="1-2-Java语言跨平台原理（理解）"><a href="#1-2-Java语言跨平台原理（理解）" class="headerlink" title="1.2 Java语言跨平台原理（理解）"></a>1.2 Java语言跨平台原理（理解）</h3><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚 拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的 跨平台。 </p>
<h3 id="1-3-JRE和JDK（记忆）"><a href="#1-3-JRE和JDK（记忆）" class="headerlink" title="1.3 JRE和JDK（记忆）"></a>1.3 JRE和JDK（记忆）</h3><p>JVM（Java Virtual Machine），Java虚拟机 JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）<br>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具 总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。 </p>
<h3 id="1-4-JDK的下载和安装（应用）"><a href="#1-4-JDK的下载和安装（应用）" class="headerlink" title="1.4 JDK的下载和安装（应用）"></a>1.4 JDK的下载和安装（应用）</h3><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1 下载"></a>1.4.1 下载</h4><p>通过官方网站获取JDK <a href="http://www.oracle.com" target="_blank" rel="noopener">http://www.oracle.com</a><br>注意：针对不同的操作系统，需要下载对应版本的JDK。 具体下载步骤请参见《JDK下载及安装说明文档》</p>
<h4 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h4><p>傻瓜式安装，下一步即可。但默认的安装路径是在C:\Program Files下，为方便统一管理建议修改安装路径，将与 开发相关的软件都安装到一个目录下，例如：E:\develop。<br>注意：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。<br>具体安装步骤请参见《JDK下载及安装说明文档》 </p>
<h4 id="1-4-3-JDK的安装目录介绍"><a href="#1-4-3-JDK的安装目录介绍" class="headerlink" title="1.4.3 JDK的安装目录介绍"></a>1.4.3 JDK的安装目录介绍</h4><p>目录名称 说明<br>bin 该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。<br>conf 该路径下存放了JDK的相关配置文件。<br>include 该路径下存放了一些平台特定的头文件。<br>jmods 该路径下存放了JDK的各种模块。<br>legal 该路径下存放了JDK各模块的授权文档。<br>lib 该路径下存放了JDK工具的一些补充JAR包。<br>操作 说明<br>盘符切换。E:回车，表示切换到E盘。<br>查看当前路径下的内容。<br>cd 目录 进入单级目录。cd itheima<br>cd .. 回退到上一级目录。<br>cd 目录1\目录2… 进入多级目录。cd itheima\JavaSE<br>cd \ 回退到盘符目录。<br>cls 清屏。<br>exit 退出命令提示符窗口。</p>
]]></content>
  </entry>
  <entry>
    <title>1.2 第一个演示程序</title>
    <url>/2020/06/22/1.2%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%BC%94%E7%A4%BA%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="2-第一个演示程序"><a href="#2-第一个演示程序" class="headerlink" title="2. 第一个演示程序"></a>2. 第一个演示程序</h2><h3 id="2-1-常用DOS命令（应用）"><a href="#2-1-常用DOS命令（应用）" class="headerlink" title="2.1 常用DOS命令（应用）"></a>2.1 常用DOS命令（应用）</h3><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命 令。<br>1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。<br>2、常用命令及其作用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">操作                说明</span><br><span class="line">盘符名称：          盘符切换。E:回车，表示切换到E盘。</span><br><span class="line">dir                查看当前路径下的内容。</span><br><span class="line"><span class="built_in">cd</span>                 目录 进入单级目录。<span class="built_in">cd</span> itheima</span><br><span class="line"><span class="built_in">cd</span> ..              回退到上一级目录。</span><br><span class="line"><span class="built_in">cd</span>                 目录1\目录2... 进入多级目录。<span class="built_in">cd</span> itheima\JavaSE</span><br><span class="line"><span class="built_in">cd</span> \               回退到盘符目录。</span><br><span class="line">cls                清屏。</span><br><span class="line"><span class="built_in">exit</span>               退出命令提示符窗口</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Path环境变量的配置（应用）"><a href="#2-2-Path环境变量的配置（应用）" class="headerlink" title="2.2 Path环境变量的配置（应用）"></a>2.2 Path环境变量的配置（应用）</h3><h4 id="2-2-1-为什么配置环境变量"><a href="#2-2-1-为什么配置环境变量" class="headerlink" title="2.2.1 为什么配置环境变量"></a>2.2.1 为什么配置环境变量</h4><p>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的 bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK 的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。 </p>
<h4 id="2-2-2-配置环境变量步骤"><a href="#2-2-2-配置环境变量步骤" class="headerlink" title="2.2.2 配置环境变量步骤"></a>2.2.2 配置环境变量步骤</h4><p>盘符名称:<br>dir<br>具体配置步骤请参见《Java环境变量配置说明》文档。 </p>
<h3 id="2-3-HelloWorld案例（应用）"><a href="#2-3-HelloWorld案例（应用）" class="headerlink" title="2.3 HelloWorld案例（应用）"></a>2.3 HelloWorld案例（应用）</h3><p>HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演 示案例。 </p>
<h4 id="2-3-1-Java程序开发运行流程"><a href="#2-3-1-Java程序开发运行流程" class="headerlink" title="2.3.1 Java程序开发运行流程"></a>2.3.1 Java程序开发运行流程</h4><p>开发Java程序，需要三个步骤：编写程序，编译程序，运行程序。 </p>
<h4 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h4><p>1、新建文本文档文件，修改名称为HelloWorld.java。<br>2、用记事本打开HelloWorld.java文件，输写程序内容。</p>
<h4 id="2-3-3-HelloWorld案例的编译和运行"><a href="#2-3-3-HelloWorld案例的编译和运行" class="headerlink" title="2.3.3 HelloWorld案例的编译和运行"></a>2.3.3 HelloWorld案例的编译和运行</h4><p>存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。<br>编译：javac 文件名.java 范例：javac HelloWorld.java<br>执行：java 类名 范例：java HelloWorld </p>
<h3 id="2-4-HelloWorld案例常见问题（理解）"><a href="#2-4-HelloWorld案例常见问题（理解）" class="headerlink" title="2.4 HelloWorld案例常见问题（理解）"></a>2.4 HelloWorld案例常见问题（理解）</h3><h4 id="2-4-1-BUG"><a href="#2-4-1-BUG" class="headerlink" title="2.4.1 BUG"></a>2.4.1 BUG</h4><p>在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug（漏洞）。 </p>
<h4 id="2-4-2-BUG的解决"><a href="#2-4-2-BUG的解决" class="headerlink" title="2.4.2 BUG的解决"></a>2.4.2 BUG的解决</h4><p>1、具备识别BUG的能力：多看<br>2、具备分析BUG的能力：多思考，多查资料<br>3、具备解决BUG的能力：多尝试，多总结 </p>
<h4 id="2-4-3-HelloWorld案例常见问题"><a href="#2-4-3-HelloWorld案例常见问题" class="headerlink" title="2.4.3 HelloWorld案例常见问题"></a>2.4.3 HelloWorld案例常见问题</h4><p>1、非法字符问题。Java中的符号都是英文格式的。<br>2、大小写问题。Java语言对大小写敏感（区分大小写）。<br>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。<br>public class HelloWorld {<br>public static void main(String[] args) {<br>System.out.println(“HelloWorld”);<br>}<br>}<br>4、编译命令后的java文件名需要带文件后缀.java<br>5、运行命令后的class文件名（类名）不带文件后缀.class<br>… </p>
<h3 id="2-5-Notepad-软件的安装和使用（应用）"><a href="#2-5-Notepad-软件的安装和使用（应用）" class="headerlink" title="2.5 Notepad++软件的安装和使用（应用）"></a>2.5 Notepad++软件的安装和使用（应用）</h3><h4 id="2-5-1-什么要使用Notepad-软件"><a href="#2-5-1-什么要使用Notepad-软件" class="headerlink" title="2.5.1 什么要使用Notepad++软件"></a>2.5.1 什么要使用Notepad++软件</h4><p>Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编 写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它 是免费的。 </p>
<h4 id="2-5-2-Notepad-软件安装"><a href="#2-5-2-Notepad-软件安装" class="headerlink" title="2.5.2 Notepad++软件安装"></a>2.5.2 Notepad++软件安装</h4><p>安装：傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\develop。 具体安装步骤请参见《Nodepad++软件安装及配置说明》文档。 </p>
<h4 id="2-5-3Notepad-软件配置"><a href="#2-5-3Notepad-软件配置" class="headerlink" title="2.5.3Notepad++软件配置"></a>2.5.3Notepad++软件配置</h4><p>安装完毕之后，为了使用方便，做一个简单的配置：修改默认语言和编码。<br>具体配置的说明请参见《Nodepad++软件安装及配置说明》文档。</p>
]]></content>
  </entry>
  <entry>
    <title>1.3 java基础语法</title>
    <url>/2020/06/22/1.3%20java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="3-java基础语法"><a href="#3-java基础语法" class="headerlink" title="3. java基础语法"></a>3. java基础语法</h2><h3 id="3-1-注释（理解）"><a href="#3-1-注释（理解）" class="headerlink" title="3.1 注释（理解）"></a>3.1 注释（理解）</h3><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的 注释分为三种：<br>单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。<br>多行注释。多行注释的格式是使用/* 和 <em>/将一段较长的注释括起来。<br>文档注释。文档注释以 /** 开始，以 */ 结束。（以后讲） 3.2 关键字（理解）<br>关键字是指被java语言赋予了特殊含义的单词。<br>// 这是单行注释文字<br>/</em> 这是多行注释文字 这是多行注释文字 这是多行注释文字 */ 注意：多行注释不能嵌套使用。<br>关键字的特点：<br>关键字的字母全部小写。<br>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。 3.3 常量（应用）<br>常量：在程序运行过程中，其值不可以发生改变的量。<br>Java中的常量分类：</p>
<p> 字符串常量 用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等 整数常量 整数，例如：-10、0、88等 小数常量 小数，例如：-5.5、1.0、88.88等<br>字符常量 用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等 布尔常量 布尔值，表示真假，只有两个值true和false<br>空常量 一个特殊的值，空值，值为null<br>除空常量外，其他常量均可使用输出语句直接输出。</p>
<h3 id="3-4-数据类型（记忆、应用）"><a href="#3-4-数据类型（记忆、应用）" class="headerlink" title="3.4 数据类型（记忆、应用）"></a>3.4 数据类型（记忆、应用）</h3><h4 id="3-4-1-计算机存储单元"><a href="#3-4-1-计算机存储单元" class="headerlink" title="3.4.1 计算机存储单元"></a>3.4.1 计算机存储单元</h4><p>我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位 （bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”， 通常用大写字母”B”表示，字节是由连续的8个位组成。<br>除了字节外还有一些常用的存储单位，其换算单位如下：<br>1B（字节） = 8bit 1KB = 1024B<br>1MB = 1024KB 1GB = 1024MB<br>1TB = 1024GB<br>public class Demo {<br>public static void main(String[] args) {<br>System.out.println(10); // 输出一个整数<br>System.out.println(5.5); // 输出一个小数<br>System.out.println(‘a’); // 输出一个字符<br>System.out.println(true); // 输出boolean值true<br>System.out.println(“欢迎来到黑马程序员”); // 输出字符串<br>}<br>}</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">数据类型       关键字    内存占用     取值范围</span><br><span class="line">整数类型    byte      1   				-128~127</span><br><span class="line"> 		 short 2 -32768~32767</span><br><span class="line"> 		 int(默认) 4 -2的31次方到2的31次方-1</span><br><span class="line">  		 long 8 -2的63次方到2的63次方-1</span><br><span class="line">浮点类型  ﬂoat 4负数：-3.402823E+38到-1.401298E-45 正数： 1.401298E-45到 3.402823E+38</span><br><span class="line"> 		double(默 认)  8   负数：-1.797693E+308到-4.9000000E-324 正数：4.9000000E-324 到 1.797693E+308</span><br><span class="line">字符类型  char   2    0-65535</span><br><span class="line">布尔类型  boolean    1    <span class="literal">true</span>，<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="3-4-2-Java中的数据类型"><a href="#3-4-2-Java中的数据类型" class="headerlink" title="3.4.2 Java中的数据类型"></a>3.4.2 Java中的数据类型</h4><p>Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型 两种。<br>Java中的基本数据类型：<br>说明：<br>e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。 在java中整数默认是int类型，浮点数默认是double类型。 </p>
<h3 id="3-5-变量（应用）"><a href="#3-5-变量（应用）" class="headerlink" title="3.5 变量（应用）"></a>3.5 变量（应用）</h3><h4 id="3-5-1-变量的定义"><a href="#3-5-1-变量的定义" class="headerlink" title="3.5.1 变量的定义"></a>3.5.1 变量的定义</h4><p>变量：在程序运行过程中，其值可以发生改变的量。<br>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。<br>变量的定义格式：<br>或者<br>数据类型 变量名 = 初始化值; // 声明变量并赋值 int age = 18; System.out.println(age);<br>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读 性。<br>变量的使用：通过变量名访问即可。</p>
<h4 id="3-5-2-使用变量时的注意事项"><a href="#3-5-2-使用变量时的注意事项" class="headerlink" title="3.5.2 使用变量时的注意事项"></a>3.5.2 使用变量时的注意事项</h4><ol>
<li>在同一对花括号中，变量名不能重复。 </li>
<li>变量在使用之前，必须初始化（赋值）。 </li>
<li>定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太 大可能超出int范围。 </li>
<li>定义ﬂoat类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是 double， double的取值范围是大于ﬂoat的，类型不兼容。 <h3 id="3-6-标识符（记忆、理解）"><a href="#3-6-标识符（记忆、理解）" class="headerlink" title="3.6 标识符（记忆、理解）"></a>3.6 标识符（记忆、理解）</h3>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。<br>Java中标识符的组成规则：<br>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。 不能使用java中的关键字作为标识符。<br>标识符对大小写敏感（区分大小写）。<br>Java中标识符的命名约定：<br>小驼峰式命名：变量名、方法名<br>首字母小写，从第二个单词开始每个单词的首字母大写。<br>大驼峰式命名：类名<br>每个单词的首字母都大写。<br>另外，标识符的命名最好可以做到见名知意<br>// 先声明，后赋值（使用前赋值即可） 数据类型 变量名; 变量名 = 初始化值; double money; money = 55.5; System.out.println(money);<br>int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开 System.out.println(a); System.out.println(b);</li>
</ol>
<p>int c,d; // 声明int类型的变量c和d，中间使用逗号隔开 c = 30; d = 40; System.out.println(c); System.out.println(d);<br>例如：username、studentNumber等。 </p>
<h3 id="3-7-类型转换（理解）"><a href="#3-7-类型转换（理解）" class="headerlink" title="3.7 类型转换（理解）"></a>3.7 类型转换（理解）</h3><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。<br>自动类型转换：<br>把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即 可。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">double num = 10; // 将int类型的10直接赋值给double类型</span><br><span class="line">System.out.println(num); // 输出10.0</span><br></pre></td></tr></table></figure>
<p>强制类型转换：<br>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。<br>强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;<br>例如：<br>说明：</p>
<ol>
<li>char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。</li>
<li>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。<figure class="highlight plain"><figcaption><span>num </span></figcaption><table><tr><td class="code"><pre><span class="line">System.out.println(num); &#x2F;&#x2F; 输出10.0</span><br><span class="line">double num1 &#x3D; 5.5; int num2 &#x3D; (int) num1; &#x2F;&#x2F; 将double类型的num1强制转换为int类型 System.out.println(num2); &#x2F;&#x2F; 输出5（小数位直接舍弃）</span><br><span class="line">int a &#x3D; &#39;a&#39;; System.out.println(a); &#x2F;&#x2F; 将输出97</span><br><span class="line">byte b1 &#x3D; 10; byte b2 &#x3D; 20; byte b3 &#x3D; b1 + b2; &#x2F;&#x2F; 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。 &#x2F;&#x2F; 修改为: int num &#x3D; b1 + b2; &#x2F;&#x2F; 或者： byte b3 &#x3D; (byte) (b1 + b2);</span><br></pre></td></tr></table></figure></li>
<li>boolean类型不能与其他基本数据类型相互转换。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>2.3 流程控制语句</title>
    <url>/2020/06/22/2.3%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="3-流程控制语句-应用"><a href="#3-流程控制语句-应用" class="headerlink" title="3. 流程控制语句(应用)"></a>3. 流程控制语句(应用)</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执<br>行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>
<h3 id="3-1-流程控制语句分类"><a href="#3-1-流程控制语句分类" class="headerlink" title="3.1 流程控制语句分类"></a>3.1 流程控制语句分类</h3><p>顺序结构<br>分支结构(if, switch)<br>循环结构(for, while, do…while) </p>
<h3 id="3-2-顺序结构"><a href="#3-2-顺序结构" class="headerlink" title="3.2 顺序结构"></a>3.2 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多<br>数的代码都是这样执行的。</p>
<h3 id="3-3-分支结构之if语句"><a href="#3-3-分支结构之if语句" class="headerlink" title="3.3 分支结构之if语句"></a>3.3 分支结构之if语句</h3><p>if语句格式1 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式： </span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;    </span><br><span class="line">    语句体;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行流程：<br>①首先计算关系表达式的值<br>②如果关系表达式的值为true就执行语句体 ③如果关系表达式的值为false就不执行语句体<br>④继续执行后面的语句内容<br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"开始"</span>);           </span><br><span class="line">        <span class="comment">//定义两个变量        </span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;        </span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;         </span><br><span class="line">        <span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b        </span></span><br><span class="line">        <span class="keyword">if</span>(a == b) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"a等于b"</span>);        </span><br><span class="line">            &#125;               </span><br><span class="line">            <span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c        </span></span><br><span class="line">            <span class="keyword">int</span> c = <span class="number">10</span>;        </span><br><span class="line">            <span class="keyword">if</span>(a == c) &#123;            </span><br><span class="line">                System.out.println(<span class="string">"a等于c"</span>);        </span><br><span class="line">                &#125;               </span><br><span class="line">                System.out.println(<span class="string">"结束"</span>);    </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>if语句格式2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式： </span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">        语句体<span class="number">1</span>;   </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">         语句体<span class="number">2</span>;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行流程：<br>①首先计算关系表达式的值<br>②如果关系表达式的值为true就执行语句体1 ③如果关系表达式的值为false就执行语句体2<br>④继续执行后面的语句内容<br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"开始"</span>);               </span><br><span class="line">            <span class="comment">//定义两个变量        </span></span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">10</span>;        </span><br><span class="line">            <span class="keyword">int</span> b = <span class="number">20</span>;        </span><br><span class="line">            b = <span class="number">5</span>;          </span><br><span class="line">            <span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b        </span></span><br><span class="line">            <span class="keyword">if</span>(a &gt; b) &#123;            </span><br><span class="line">                System.out.println(<span class="string">"a的值大于b"</span>);        </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">                    System.out.println(<span class="string">"a的值不大于b"</span>);        </span><br><span class="line">                    &#125;               </span><br><span class="line">                    System.out.println(<span class="string">"结束"</span>);    </span><br><span class="line">                    &#125; </span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>
<p>if语句案例：奇偶数<br>需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。<br>分析：<br>①为了体现任意给出一个整数，采用键盘录入一个数据<br>②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构 ③判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0<br>④根据判定情况，在控制台输出对应的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据)        </span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);                </span><br><span class="line">        System.out.println(<span class="string">"请输入一个整数："</span>);        </span><br><span class="line">        <span class="keyword">int</span> number = sc.nextInt();          </span><br><span class="line">        <span class="comment">//判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构                </span></span><br><span class="line">        <span class="comment">//判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0        </span></span><br><span class="line">        <span class="comment">//根据判定情况，在控制台输出对应的内容        </span></span><br><span class="line">        <span class="keyword">if</span>(number%<span class="number">2</span> == <span class="number">0</span>) &#123;            </span><br><span class="line">            System.out.println(number + <span class="string">"是偶数"</span>);        </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">                System.out.println(number + <span class="string">"是奇数"</span>);        </span><br><span class="line">                &#125;       </span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if语句格式3</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式： </span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;    </span><br><span class="line">    语句体<span class="number">1</span>;   </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;    </span><br><span class="line">        语句体<span class="number">2</span>;   </span><br><span class="line">        &#125; … <span class="keyword">else</span> &#123;    </span><br><span class="line">            语句体n+<span class="number">1</span>; </span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>执行流程：<br>①首先计算关系表达式1的值<br>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值<br>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值<br>④…<br>⑤如果没有任何关系表达式为true，就执行语句体n+1。<br>示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo03</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"开始"</span>);        </span><br><span class="line">        <span class="comment">// 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日        </span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);        </span><br><span class="line">        System.out.println(<span class="string">"请输入一个星期数(1-7)："</span>);        </span><br><span class="line">        <span class="keyword">int</span> week = sc.nextInt();        </span><br><span class="line">        <span class="keyword">if</span>(week == <span class="number">1</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">2</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期二"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">3</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期三"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">4</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期四"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">5</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期五"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">6</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期六"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            System.out.println(<span class="string">"星期日"</span>);        </span><br><span class="line">        &#125;           </span><br><span class="line">        System.out.println(<span class="string">"结束"</span>);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>if语句格式3案例：<br>需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明 的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。<br>分析：<br>①小明的考试成绩未知，可以使用键盘录入的方式获取值<br>②由于奖励种类较多，属于多种判断，采用if…else…if格式实现<br>③为每种判断设置对应的条件<br>④为每种判断设置对应的奖励</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//小明的考试成绩未知，可以使用键盘录入的方式获取值        </span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);            </span><br><span class="line">        System.out.println(<span class="string">"请输入一个分数："</span>);        </span><br><span class="line">        <span class="keyword">int</span> score = sc.nextInt();        </span><br><span class="line">        <span class="comment">//由于奖励种类较多，属于多种判断，采用if...else...if格式实现        </span></span><br><span class="line">        <span class="comment">//为每种判断设置对应的条件        </span></span><br><span class="line">        <span class="comment">//为每种判断设置对应的奖励          </span></span><br><span class="line">        <span class="comment">//数据测试：正确数据，边界数据，错误数据        </span></span><br><span class="line">        <span class="keyword">if</span>(score&gt;<span class="number">100</span> || score&lt;<span class="number">0</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"你输入的分数有误"</span>);        </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">95</span> &amp;&amp; score&lt;=<span class="number">100</span>) &#123;            </span><br><span class="line">                System.out.println(<span class="string">"山地自行车一辆"</span>);        </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">94</span>) &#123;            </span><br><span class="line">                System.out.println(<span class="string">"游乐场玩一次"</span>);        </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;=<span class="number">89</span>) &#123;            </span><br><span class="line">                System.out.println(<span class="string">"变形金刚玩具一个"</span>);        </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">                System.out.println(<span class="string">"胖揍一顿"</span>);        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>2.2 数据输入</title>
    <url>/2020/06/22/2.2%20%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5/</url>
    <content><![CDATA[<h2 id="2-数据输入-应用"><a href="#2-数据输入-应用" class="headerlink" title="2. 数据输入(应用)"></a>2. 数据输入(应用)</h2><p>我们可以通过 Scanner 类来获取用户的输入。使用步骤如下：<br>1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure>
<p>2、创建Scanner对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br></pre></td></tr></table></figure>
<p>3、接收数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 表示将键盘录入的值作为int数返回。</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//创建对象        </span></span><br><span class="line">                Scanner sc = <span class="keyword">new</span> Scanner(System.in);        </span><br><span class="line">                <span class="comment">//接收数据        </span></span><br><span class="line">                <span class="keyword">int</span> x = sc.nextInt();        </span><br><span class="line">                <span class="comment">//输出数据        </span></span><br><span class="line">                System.out.println(<span class="string">"x:"</span> + x);    </span><br><span class="line">                &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>改写三个和尚案例，数据使用键盘录入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//身高未知，采用键盘录入实现。首先导包，然后创建对象。        </span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);        </span><br><span class="line">        <span class="comment">//键盘录入三个身高分别赋值给三个变量。        System.out.println("请输入第一个和尚的身高：");        int height1 = sc.nextInt();        System.out.println("请输入第二个和尚的身高：");        int height2 = sc.nextInt();        System.out.println("请输入第三个和尚的身高：");        int height3 = sc.nextInt();        </span></span><br><span class="line">        <span class="comment">//用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。        </span></span><br><span class="line">        <span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;        </span><br><span class="line">        <span class="comment">//用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。        </span></span><br><span class="line">        <span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;        </span><br><span class="line">        <span class="comment">//输出结果。        </span></span><br><span class="line">        System.out.println(<span class="string">"这三个和尚中身高最高的是："</span> + maxHeight +<span class="string">"cm"</span>);    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>2.1 运算符 </title>
    <url>/2020/06/22/2.1%20%E8%BF%90%E7%AE%97%E7%AC%A6%20/</url>
    <content><![CDATA[<h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h2><h3 id="1-1-算术运算符（理解）"><a href="#1-1-算术运算符（理解）" class="headerlink" title="1.1 算术运算符（理解）"></a>1.1 算术运算符（理解）</h3><h4 id="1-1-1-运算符和表达式"><a href="#1-1-1-运算符和表达式" class="headerlink" title="1.1.1 运算符和表达式"></a>1.1.1 运算符和表达式</h4><p>运算符：对常量或者变量进行操作的符号<br>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。<br>不同运算符连接的表达式体现的是不同类型的表达式。<br>举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure>
<p>+：是运算符，并且是算术运算符。 a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。 </p>
<h4 id="1-1-2-算术运算符"><a href="#1-1-2-算术运算符" class="headerlink" title="1.1.2 算术运算符"></a>1.1.2 算术运算符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号 作用 说明</span><br><span class="line">+ 加 参看小学一年级</span><br><span class="line">- 减 参看小学一年级</span><br><span class="line">* 乘 参看小学二年级，与“×”相同</span><br><span class="line">/ 除 参看小学二年级，与“÷”相同</span><br><span class="line">% 取余 获取的是两个数据做除法的余数</span><br></pre></td></tr></table></figure>
<p>注意：<br>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。<br>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>; </span><br><span class="line">System.out.println(a / b); <span class="comment">// 输出结果3 </span></span><br><span class="line">System.out.println(a % b); <span class="comment">// 输出结果1</span></span><br></pre></td></tr></table></figure>
<h4 id="1-1-3-字符的“-”操作"><a href="#1-1-3-字符的“-”操作" class="headerlink" title="1.1.3 字符的“+”操作"></a>1.1.3 字符的“+”操作</h4><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：<br>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加<br>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加<br>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少 </span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">'a'</span>; System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">'A'</span>; System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">'0'</span>; System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure>
<p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。<br>提升规则：<br>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。<br>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型<br>等级顺序：byte,short,char –&gt; int –&gt; long –&gt; ﬂoat –&gt; double<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>; </span><br><span class="line"><span class="comment">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失 </span></span><br><span class="line">精度 <span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收 </span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型 ------------------------------</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>; </span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure>
<p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定 义字符，而使用字符串类型，更不会使用char类型做算术运算</p>
<h4 id="1-1-4-字符串的“-”操作"><a href="#1-1-4-字符串的“-”操作" class="headerlink" title="1.1.4 字符串的“+”操作"></a>1.1.4 字符串的“+”操作</h4><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"itheima"</span>+ <span class="number">666</span>); <span class="comment">// 输出：itheima666</span></span><br></pre></td></tr></table></figure>
<p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">"年黑马"</span>); <span class="comment">// 输出：199年黑马 System.out.println(1 + 2 + "itheima" + 3 + 4); // 输出：3itheima34 // 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">"itheima"</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3itheima7</span></span><br></pre></td></tr></table></figure>
<p>###1.2 赋值运算符（应用）<br>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号 作用 说明</span><br><span class="line">= 赋值 a=<span class="number">10</span>，将<span class="number">10</span>赋值给变量a</span><br><span class="line">+= 加后赋值 a+=b，将a+b的值给a</span><br><span class="line">-= 减后赋值 a-=b，将a-b的值给a</span><br><span class="line">*= 乘后赋值 a*=b，将a×b的值给a</span><br><span class="line">/= 除后赋值 a/=b，将a÷b的商给a</span><br><span class="line">%= 取余后赋值 a%=b，将a÷b的余数给a</span><br></pre></td></tr></table></figure>
<p>注意：<br>扩展的赋值运算符隐含了强制类型转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>; </span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span></span><br><span class="line"> </span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure>
<h3 id="1-3-自增自减运算符（理解"><a href="#1-3-自增自减运算符（理解" class="headerlink" title="1.3 自增自减运算符（理解)"></a>1.3 自增自减运算符（理解)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号 作用 说明</span><br><span class="line">++ 自增 变量的值加<span class="number">1</span></span><br><span class="line">-- 自减 变量的值减<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>注意事项：<br>++和– 既可以放在变量的后边，也可以放在变量的前边。<br>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。 参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。 参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。<br>最常见的用法：单独使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>; i++; <span class="comment">// 单独使用 System.out.println("i:" + i); // i:11</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>; ++j; <span class="comment">// 单独使用 System.out.println("j:" + j); // j:11</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>; <span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1 System.out.println("x:" + x + ", y:" + y); // x:11，y:10</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>; <span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1 System.out.println("m:" + m + ", m:" + m); // m:11，m:11</span></span><br></pre></td></tr></table></figure>
<p>练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> y = x++ + x++ + x++; </span><br><span class="line">System.out.println(y); <span class="comment">// y的值是多少？ </span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是 10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。 所以整个式子应该是：int y = 10 + 11 + 12; 输出结果为33。 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</span><br></pre></td></tr></table></figure>
<h3 id="1-4-关系运算符（应用"><a href="#1-4-关系运算符（应用" class="headerlink" title="1.4 关系运算符（应用)"></a>1.4 关系运算符（应用)</h3><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号 说明</span><br><span class="line">== a==b，判断a和b的值是否相等，成立为<span class="keyword">true</span>，不成立为<span class="keyword">false</span></span><br><span class="line">!= a!=b，判断a和b的值是否不相等，成立为<span class="keyword">true</span>，不成立为<span class="keyword">false</span></span><br><span class="line">&gt; a&gt;b，判断a是否大于b，成立为<span class="keyword">true</span>，不成立为<span class="keyword">false</span></span><br><span class="line">&gt;= a&gt;=b，判断a是否大于等于b，成立为<span class="keyword">true</span>，不成立为<span class="keyword">false</span></span><br><span class="line">&lt; a&lt;b，判断a是否小于b，成立为<span class="keyword">true</span>，不成立为<span class="keyword">false</span></span><br><span class="line">&lt;= a&lt;=b，判断a是否小于等于b，成立为<span class="keyword">true</span>，不成立为<span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<p>注意事项：<br>关系运算符的结果都是boolean类型，要么是true，要么是false。<br>千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">System.out.println(a == b); <span class="comment">// false </span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true </span></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false </span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">// false </span></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true </span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量 </span></span><br><span class="line"><span class="keyword">boolean</span> flag = a &gt; b; </span><br><span class="line">System.out.println(flag); <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-逻辑运算符（应用"><a href="#1-5-逻辑运算符（应用" class="headerlink" title="1.5 逻辑运算符（应用)"></a>1.5 逻辑运算符（应用)</h3><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断 的结果是 true 或 false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号 作用 说明</span><br><span class="line">&amp; 逻辑与 a&amp;b，a和b都是<span class="keyword">true</span>，结果为<span class="keyword">true</span>，否则为<span class="keyword">false</span></span><br><span class="line">| 逻辑或 a|b，a和b都是<span class="keyword">false</span>，结果为<span class="keyword">false</span>，否则为<span class="keyword">true</span></span><br><span class="line">^ 逻辑异或 a^b，a和b结果不同为<span class="keyword">true</span>，相同为<span class="keyword">false</span></span><br><span class="line">! 逻辑非 !a，结果和a的结果正好相反</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量 </span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">int</span> j = <span class="number">20</span>; </span><br><span class="line"><span class="keyword">int</span> k = <span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false System.out.println((i &gt; j) &amp; (i &gt; k)); //false &amp; false,输出false System.out.println((i &lt; j) &amp; (i &gt; k)); //true &amp; false,输出false System.out.println((i &gt; j) &amp; (i &lt; k)); //false &amp; true,输出false System.out.println((i &lt; j) &amp; (i &lt; k)); //true &amp; true,输出true System.out.println("--------");</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true System.out.println((i &gt; j) | (i &gt; k)); //false | false,输出false System.out.println((i &lt; j) | (i &gt; k)); //true | false,输出true </span></span><br><span class="line">System.out.println((i &gt; j) | (i &lt; k)); <span class="comment">//false | true,输出true </span></span><br><span class="line">System.out.println((i &lt; j) | (i &lt; k)); <span class="comment">//true | true,输出true </span></span><br><span class="line">System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//^ “异或”，相同为false，不同为true </span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &gt; k)); <span class="comment">//false ^ false,输出false System.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出true</span></span><br><span class="line"></span><br><span class="line">System.out.println((i &gt; j) ^ (i &lt; k)); <span class="comment">//false ^ true,输出true System.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出false System.out.println("--------");</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//! “非”，取反 </span></span><br><span class="line">System.out.println((i &gt; j)); <span class="comment">//false </span></span><br><span class="line">System.out.println(!(i &gt; j)); <span class="comment">//!false，,输出true</span></span><br></pre></td></tr></table></figure>
<p>短路逻辑运算符 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号 作用 说明</span><br><span class="line">&amp;&amp; 短路与 作用和&amp;相同，但是有短路效果</span><br><span class="line">|| 短路或 作用和|相同，但是有短路效果</span><br></pre></td></tr></table></figure>
<p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都 计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式 将不再参与运算。<br>逻辑与&amp;，无论左边真假，右边都要执行。<br>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。<br>逻辑或|，无论左边真假，右边都要执行。<br>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>; </span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>; </span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算 System.out.println(x); // 4 </span></span><br><span class="line">System.out.println(y); <span class="comment">// 5</span></span><br><span class="line"> </span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp;&amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 左边已经可以确定结果为false，右边不参与运算 </span></span><br><span class="line">System.out.println(x); <span class="comment">// 4 </span></span><br><span class="line">System.out.println(y); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>3.1 switch语句</title>
    <url>/2020/06/22/3.1%20switch%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="1-switch语句"><a href="#1-switch语句" class="headerlink" title="1. switch语句"></a>1. switch语句</h2><h3 id="1-1-switch语句结构（掌握）"><a href="#1-1-switch语句结构（掌握）" class="headerlink" title="1.1 switch语句结构（掌握）"></a>1.1 switch语句结构（掌握）</h3><p>格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:        </span><br><span class="line">    语句体<span class="number">1</span>;        </span><br><span class="line">    <span class="keyword">break</span>;    </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:        </span><br><span class="line">    语句体<span class="number">2</span>;        </span><br><span class="line">    <span class="keyword">break</span>;    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="keyword">default</span>:        </span><br><span class="line">    语句体n+<span class="number">1</span>;        </span><br><span class="line">    <span class="keyword">break</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行流程：<br>首先计算出表达式的值<br>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结 束。<br>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。 </p>
<h3 id="1-2-switch语句练习-春夏秋冬（应用）"><a href="#1-2-switch语句练习-春夏秋冬（应用）" class="headerlink" title="1.2 switch语句练习-春夏秋冬（应用）"></a>1.2 switch语句练习-春夏秋冬（应用）</h3><p>需求：一年有12个月，分属于春夏秋冬4个季节，键盘录入一个月份，请用程序实现判断该月份属于哪个季<br>节，并输出。 运行结果：   </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">春：<span class="number">3</span>、<span class="number">4</span>、<span class="number">5</span> </span><br><span class="line">夏：<span class="number">6</span>、<span class="number">7</span>、<span class="number">8</span> </span><br><span class="line">秋：<span class="number">9</span>、<span class="number">10</span>、<span class="number">11</span> </span><br><span class="line">冬：<span class="number">1</span>、<span class="number">2</span>、<span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//键盘录入月份数据，使用变量接收        </span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);        </span><br><span class="line">        System.out.println(<span class="string">"请输入一个月份："</span>);        </span><br><span class="line">        <span class="keyword">int</span> month = sc.nextInt();        </span><br><span class="line">        <span class="comment">//case穿透        </span></span><br><span class="line">        <span class="keyword">switch</span>(month) &#123;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:                </span><br><span class="line">            System.out.println(<span class="string">"冬季"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:                </span><br><span class="line">            System.out.println(<span class="string">"春季"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:                </span><br><span class="line">            System.out.println(<span class="string">"夏季"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:                </span><br><span class="line">            System.out.println(<span class="string">"秋季"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">default</span>:                </span><br><span class="line">            System.out.println(<span class="string">"你输入的月份有误"</span>);        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>注意：如果switch中得case，没有对应break的话，则会出现case穿透的现象。</p>
]]></content>
  </entry>
  <entry>
    <title>3.2 for循环</title>
    <url>/2020/06/22/3.2%20for%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="2-for循环"><a href="#2-for循环" class="headerlink" title="2. for循环"></a>2. for循环</h2><h3 id="2-1-for循环结构（掌握）"><a href="#2-1-for循环结构（掌握）" class="headerlink" title="2.1 for循环结构（掌握）"></a>2.1 for循环结构（掌握）</h3><p>循环：<br>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，<br>当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直<br>执行下去，形成死循环。<br>for循环格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句;条件判断语句;条件控制语句) &#123;    </span><br><span class="line">    循环体语句; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>格式解释：<br>    初始化语句：  用于表示循环开启时的起始状态，简单说就是循环开始的时候什么样<br>    条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去<br>    循环体语句：  用于表示循环反复执行的内容，简单说就是循环反复执行的事情<br>    条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去<br>执行流程：<br>①执行初始化语句<br>②执行条件判断语句，看其结果是true还是false<br>如果是false，循环结束<br>如果是true，继续执行<br>③执行循环体语句<br>④执行条件控制语句<br>⑤回到②继续 </p>
<h3 id="2-2-for循环练习-输出数据（应用）"><a href="#2-2-for循环练习-输出数据（应用）" class="headerlink" title="2.2 for循环练习-输出数据（应用）"></a>2.2 for循环练习-输出数据（应用）</h3><p>需求：在控制台输出1-5和5-1的数据<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//需求：输出数据1-5        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;            </span><br><span class="line">            System.out.println(i);        </span><br><span class="line">            &#125;        </span><br><span class="line">            System.out.println(<span class="string">"--------"</span>);        </span><br><span class="line">            <span class="comment">//需求：输出数据5-1        </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>; i&gt;=<span class="number">1</span>; i--) &#123;            </span><br><span class="line">                System.out.println(i);        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-for循环练习-求和（应用）"><a href="#2-3-for循环练习-求和（应用）" class="headerlink" title="2.3 for循环练习-求和（应用）"></a>2.3 for循环练习-求和（应用）</h3><p>需求：求1-5之间的数据和，并把求和结果在控制台输出<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0        </span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;        </span><br><span class="line">        <span class="comment">//从1开始到5结束的数据，使用循环结构完成        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;            </span><br><span class="line">            <span class="comment">//将反复进行的事情写入循环结构内部             </span></span><br><span class="line">            <span class="comment">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中            </span></span><br><span class="line">            sum += i;            </span><br><span class="line">            <span class="comment">/*                </span></span><br><span class="line"><span class="comment">            sum += i;   </span></span><br><span class="line"><span class="comment">            sum = sum + i;                </span></span><br><span class="line"><span class="comment">            第一次：sum = sum + i = 0 + 1 = 1;                </span></span><br><span class="line"><span class="comment">            第二次：sum = sum + i = 1 + 2 = 3;                </span></span><br><span class="line"><span class="comment">            第三次：sum = sum + i = 3 + 3 = 6;                </span></span><br><span class="line"><span class="comment">            第四次：sum = sum + i = 6 + 4 = 10;                </span></span><br><span class="line"><span class="comment">            第五次：sum = sum + i = 10 + 5 = 15;            </span></span><br><span class="line"><span class="comment">            */</span>        </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当循环执行完毕时，将最终数据打印出来        </span></span><br><span class="line">            System.out.println(<span class="string">"1-5之间的数据和是："</span> + sum);    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>本题要点：<br>    今后遇到的需求中，如果带有求和二字，请立即联想到求和变量<br>    求和变量的定义位置，必须在循环外部，如果在循环内部则计算出的数据将是错误的 </p>
<h3 id="2-4-for循环练习-求偶数和（应用）"><a href="#2-4-for循环练习-求偶数和（应用）" class="headerlink" title="2.4 for循环练习-求偶数和（应用）"></a>2.4 for循环练习-求偶数和（应用）</h3><p>需求：<br>求1-100之间的偶数和，并把求和结果在控制台输出<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest03</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0        </span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;        </span><br><span class="line">        <span class="comment">//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++) &#123;            </span><br><span class="line">            <span class="comment">//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数            </span></span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>) &#123;                </span><br><span class="line">                sum += i;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="comment">//当循环执行完毕时，将最终数据打印出来        </span></span><br><span class="line">        System.out.println(<span class="string">"1-100之间的偶数和是："</span> + sum);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-for循环练习-水仙花（应用）"><a href="#2-5-for循环练习-水仙花（应用）" class="headerlink" title="2.5 for循环练习-水仙花（应用）"></a>2.5 for循环练习-水仙花（应用）</h3><p>需求：在控制台输出所有的“水仙花数”<br>解释：什么是水仙花数？<br>    水仙花数，指的是一个三位数，个位、十位、百位的数字立方和等于原数<br>        例如 153  3<em>3</em>3 + 5<em>5</em>5 + 1<em>1</em>1 = 153<br>思路：<br>    1. 获取所有的三位数，准备进行筛选，最小的三位数为100，最大的三位数为999，使用for循环获取<br>    2. 获取每一个三位数的个位，十位，百位，做if语句判断是否是水仙花数<br>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest04</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>; i&lt;<span class="number">1000</span>; i++) &#123;            </span><br><span class="line">            <span class="comment">//在计算之前获取三位数中每个位上的值</span></span><br><span class="line">            <span class="keyword">int</span> ge = i%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">int</span> shi = i/<span class="number">10</span>%<span class="number">10</span>;            </span><br><span class="line">            <span class="keyword">int</span> bai = i/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;                        </span><br><span class="line">            <span class="comment">//判定条件是将三位数中的每个数值取出来，计算立方和后与原始数字比较是否相等            </span></span><br><span class="line">            <span class="keyword">if</span>(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;                </span><br><span class="line">                <span class="comment">//输出满足条件的数字就是水仙花数                </span></span><br><span class="line">                System.out.println(i);            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-for循环练习-统计水仙花数个数（应用）"><a href="#2-6-for循环练习-统计水仙花数个数（应用）" class="headerlink" title="2.6 for循环练习-统计水仙花数个数（应用）"></a>2.6 for循环练习-统计水仙花数个数（应用）</h3><p>需求：统计“水仙花数”一共有多少个，并在控制台输出个数<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest05</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义变量count，用于保存“水仙花数”的数量，初始值为0        </span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;        </span><br><span class="line">        <span class="comment">//输出所有的水仙花数必然要使用到循环，遍历所有的三位数，三位数从100开始，到999结束        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>; i&lt;<span class="number">1000</span>; i++) &#123;            </span><br><span class="line">            <span class="comment">//在计算之前获取三位数中每个位上的值            </span></span><br><span class="line">            <span class="keyword">int</span> ge = i%<span class="number">10</span>;            </span><br><span class="line">            <span class="keyword">int</span> shi = i/<span class="number">10</span>%<span class="number">10</span>;            </span><br><span class="line">            <span class="keyword">int</span> bai = i/<span class="number">10</span>/<span class="number">10</span>%<span class="number">10</span>;            </span><br><span class="line">            <span class="comment">//在判定水仙花数的过程中，满足条件不再输出，更改为修改count的值，使count+1            </span></span><br><span class="line">            <span class="keyword">if</span>(ge*ge*ge + shi*shi*shi + bai*bai*bai == i) &#123;                </span><br><span class="line">                count++;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">    <span class="comment">//打印输出最终结果        </span></span><br><span class="line">    System.out.println(<span class="string">"水仙花共有："</span> + count + <span class="string">"个"</span>);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本题要点：<br>今后如果需求带有统计xxx，请先想到计数器变量<br>计数器变量定义的位置，必须在循环外部 </p>
]]></content>
  </entry>
  <entry>
    <title>3.3 while循环</title>
    <url>/2020/06/22/3.3%20while%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h2 id="3-while循环"><a href="#3-while循环" class="headerlink" title="3. while循环"></a>3. while循环</h2><h3 id="3-1-while结构（掌握）"><a href="#3-1-while结构（掌握）" class="headerlink" title="3.1 while结构（掌握）"></a>3.1 while结构（掌握）</h3><p>while循环完整格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句; </span><br><span class="line"><span class="keyword">while</span> (条件判断语句) &#123;    </span><br><span class="line">    循环体语句;    </span><br><span class="line">    条件控制语句; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>while循环执行流程：<br>①执行初始化语句<br>②执行条件判断语句，看其结果是true还是false<br>如果是false，循环结束<br>如果是true，继续执行<br>③执行循环体语句<br>④执行条件控制语句<br>⑤回到②继续<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//需求：在控制台输出5次"HelloWorld"        </span></span><br><span class="line">        <span class="comment">//for循环实现        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);        </span><br><span class="line">            &#125;        </span><br><span class="line">            System.out.println(<span class="string">"--------"</span>);        </span><br><span class="line">            <span class="comment">//while循环实现        </span></span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">1</span>;        </span><br><span class="line">            <span class="keyword">while</span>(j&lt;=<span class="number">5</span>) &#123;            </span><br><span class="line">                System.out.println(<span class="string">"HelloWorld"</span>);            </span><br><span class="line">                j++;        </span><br><span class="line">            &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-while循环练习-珠穆朗玛峰（应用）"><a href="#3-2-while循环练习-珠穆朗玛峰（应用）" class="headerlink" title="3.2 while循环练习-珠穆朗玛峰（应用）"></a>3.2 while循环练习-珠穆朗玛峰（应用）</h3><p>需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫<br>米。请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义一个计数器，初始值为0        </span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;        </span><br><span class="line">        <span class="comment">//定义纸张厚度        </span></span><br><span class="line">        <span class="keyword">double</span> paper = <span class="number">0.1</span>;</span><br><span class="line">        <span class="comment">//定义珠穆朗玛峰的高度</span></span><br><span class="line">        <span class="keyword">int</span> zf = <span class="number">8844430</span>;        </span><br><span class="line">        <span class="comment">//因为要反复折叠，所以要使用循环，但是不知道折叠多少次，这种情况下更适合使用while循环        </span></span><br><span class="line">        <span class="comment">//折叠的过程中当纸张厚度大于珠峰就停止了，因此继续执行的要求是纸张厚度小于珠峰高度        </span></span><br><span class="line">        <span class="keyword">while</span>(paper &lt;= zf) &#123;            </span><br><span class="line">            <span class="comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍            </span></span><br><span class="line">            paper *= <span class="number">2</span>;            </span><br><span class="line">            <span class="comment">//在循环中执行累加，对应折叠了多少次            </span></span><br><span class="line">            count++;        </span><br><span class="line">            &#125;        </span><br><span class="line">            <span class="comment">//打印计数器的值        </span></span><br><span class="line">            System.out.println(<span class="string">"需要折叠："</span> + count + <span class="string">"次"</span>);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>3.5 Random</title>
    <url>/2020/06/22/3.5%20Random/</url>
    <content><![CDATA[<h2 id="5-Random"><a href="#5-Random" class="headerlink" title="5. Random"></a>5. Random</h2><h3 id="5-1-Random产生随机数（掌握）"><a href="#5-1-Random产生随机数（掌握）" class="headerlink" title="5.1 Random产生随机数（掌握）"></a>5.1 Random产生随机数（掌握）</h3><p>概述：<br>    Random类似Scanner，也是Java提供好的API，内部提供了产生随机数的功能<br>        API后续课程详细讲解，现在可以简单理解为Java已经写好的代码<br>        使用步骤：<br>        1. 导入包 import java.util.Random;<br>        2. 创建对象 Random r = new Random();<br>        3. 产生随机数 int num = r.nextInt(10);<br>        解释： 10代表的是一个范围，如果括号写10，产生的随机数就是0-9，括号写20，参数的随机数则是0-19<br>        示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//创建对象        </span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();        </span><br><span class="line">        <span class="comment">//用循环获取10个随机数        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;            </span><br><span class="line">            <span class="comment">//获取随机数            </span></span><br><span class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);            </span><br><span class="line">            System.out.println(<span class="string">"number:"</span> + number);        </span><br><span class="line">            &#125;        </span><br><span class="line">            <span class="comment">//需求：获取一个1-100之间的随机数        </span></span><br><span class="line">            <span class="keyword">int</span> x = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;        </span><br><span class="line">            System.out.println(x);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-Random练习-猜数字（应用）"><a href="#5-3-Random练习-猜数字（应用）" class="headerlink" title="5.3 Random练习-猜数字（应用）"></a>5.3 Random练习-猜数字（应用）</h3><p>需求： 程序自动生成一个1-100之间的数字，使用程序实现猜出这个数字是多少？<br>当猜错的时候根据不同情况给出相应的提示<br>A. 如果猜的数字比真实数字大，提示你猜的数据大了<br>B. 如果猜的数字比真实数字小，提示你猜的数据小了<br>C. 如果猜的数字与真实数字相等，提示恭喜你猜中了<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random; </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//要完成猜数字的游戏，首先需要有一个要猜的数字，使用随机数生成该数字，范围1到100        </span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();        </span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;                </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;            </span><br><span class="line">            <span class="comment">//使用程序实现猜数字，每次均要输入猜测的数字值，需要使用键盘录入实现            </span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);                        </span><br><span class="line">            System.out.println(<span class="string">"请输入你要猜的数字："</span>);            </span><br><span class="line">            <span class="keyword">int</span> guessNumber = sc.nextInt();                        </span><br><span class="line">            <span class="comment">//比较输入的数字和系统产生的数据，需要使用分支语句。             </span></span><br><span class="line">            <span class="comment">//这里使用if..else..if..格式，根据不同情况进行猜测结果显示            </span></span><br><span class="line">            <span class="keyword">if</span>(guessNumber &gt; number) &#123;                </span><br><span class="line">                System.out.println(<span class="string">"你猜的数字"</span> + guessNumber + <span class="string">"大了"</span>);            </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number) &#123;                </span><br><span class="line">                    System.out.println(<span class="string">"你猜的数字"</span> + guessNumber + <span class="string">"小了"</span>);            </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">                    System.out.println(<span class="string">"恭喜你猜中了"</span>);                </span><br><span class="line">                    <span class="keyword">break</span>;            </span><br><span class="line">                &#125;        </span><br><span class="line">            &#125;            </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>3.4循环细节</title>
    <url>/2020/06/22/3.4%E5%BE%AA%E7%8E%AF%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<h2 id="4-循环细节"><a href="#4-循环细节" class="headerlink" title="4. 循环细节"></a>4. 循环细节</h2><h3 id="4-1-do…while循环结构（掌握）"><a href="#4-1-do…while循环结构（掌握）" class="headerlink" title="4.1 do…while循环结构（掌握）"></a>4.1 do…while循环结构（掌握）</h3><p>完整格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句; </span><br><span class="line"><span class="keyword">do</span> &#123;    </span><br><span class="line">    循环体语句;    </span><br><span class="line">    条件控制语句; </span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure>
<p>执行流程：<br>① 执行初始化语句<br>② 执行循环体语句<br>③ 执行条件控制语句<br>④ 执行条件判断语句，看其结果是true还是false<br>如果是false，循环结束<br>如果是true，继续执行<br>⑤ 回到②继续<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoWhileDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//需求：在控制台输出5次"HelloWorld"        </span></span><br><span class="line">        <span class="comment">//for循环实现        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>);        </span><br><span class="line">            &#125;        </span><br><span class="line">            System.out.println(<span class="string">"--------"</span>);        </span><br><span class="line">            <span class="comment">//do...while循环实现        </span></span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">1</span>;        </span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"HelloWorld"</span>);            </span><br><span class="line">                j++;        </span><br><span class="line">                &#125;<span class="keyword">while</span>(j&lt;=<span class="number">5</span>);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-三种循环的区别（理解）"><a href="#4-2-三种循环的区别（理解）" class="headerlink" title="4.2 三种循环的区别（理解）"></a>4.2 三种循环的区别（理解）</h3><p>三种循环的区别<br>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）<br>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）<br>for循环和while的区别<br>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访<br>问到了<br>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变<br>量还可以继续使用<br>死循环（无限循环）的三种格式 </p>
<ol>
<li>for(;;){} </li>
<li>while(true){} </li>
<li>do {} while(true); <h3 id="4-3-跳转控制语句（掌握）"><a href="#4-3-跳转控制语句（掌握）" class="headerlink" title="4.3 跳转控制语句（掌握）"></a>4.3 跳转控制语句（掌握）</h3>跳转控制语句（break）<br>跳出循环，结束循环<br>跳转控制语句（continue）<br>跳过本次循环，继续下次循环<br>注意： continue只能在循环中进行使用！ <h3 id="4-4-循环嵌套（理解）"><a href="#4-4-循环嵌套（理解）" class="headerlink" title="4.4 循环嵌套（理解）"></a>4.4 循环嵌套（理解）</h3>循环嵌套概述：在循环中，继续定义循环<br>示例代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">    <span class="comment">//外循环控制小时的范围，内循环控制分钟的范围        </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> hour = <span class="number">0</span>; hour &lt; <span class="number">24</span>; hour++) &#123;            </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> minute = <span class="number">0</span>; minute &lt; <span class="number">60</span>; minute++) &#123;                </span><br><span class="line">            System.out.println(hour + <span class="string">"时"</span> + minute + <span class="string">"分"</span>);            </span><br><span class="line">            &#125;            </span><br><span class="line">            System.out.println(<span class="string">"--------"</span>);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
理解：<br>请反复理解这句话（整个内循环，就是外循环的一个循环体，内部循环体没有执行完毕，外循环是不会<br>继续向下执行的）<br>结论：<br>外循环执行一次，内循环执行一圈 </li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>5.1 方法</title>
    <url>/2020/06/22/5.1%20%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-1-方法的概念（理解）"><a href="#1-1-方法的概念（理解）" class="headerlink" title="1.1 方法的概念（理解）"></a>1.1 方法的概念（理解）</h3><p>方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集<br>注意： 方法必须先创建才可以使用，该过程成为方法定义<br>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用 </p>
]]></content>
  </entry>
  <entry>
    <title>5.3 带参数方法定义和调用</title>
    <url>/2020/06/22/5.3%20%E5%B8%A6%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="3-带参数方法定义和调用"><a href="#3-带参数方法定义和调用" class="headerlink" title="3. 带参数方法定义和调用"></a>3. 带参数方法定义和调用</h2><h3 id="3-1-带参数方法定义和调用（掌握）"><a href="#3-1-带参数方法定义和调用（掌握）" class="headerlink" title="3.1 带参数方法定义和调用（掌握）"></a>3.1 带参数方法定义和调用（掌握）</h3><p>定义格式：<br>参数：由数据类型和变量名组成 - 数据类型 变量名<br>参数范例：int a</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>) &#123;    </span><br><span class="line">    方法体; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3</span>...) &#123;</span><br><span class="line">        方法体; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;    </span><br><span class="line">    ... </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;    </span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<br>方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错<br>方法定义时，多个参数之间使用逗号( ，)分隔<br>调用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名(参数)；</span><br><span class="line"> </span><br><span class="line">方法名(参数<span class="number">1</span>,参数<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isEvenNumber(<span class="number">10</span>);</span><br><span class="line"> </span><br><span class="line">getMax(<span class="number">10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错</p>
<h3 id="3-2-形参和实参（理解）"><a href="#3-2-形参和实参（理解）" class="headerlink" title="3.2 形参和实参（理解）"></a>3.2 形参和实参（理解）</h3><ol>
<li>形参：方法定义中的参数 等同于变量定义格式，例如：int number</li>
<li>实参：方法调用中的参数 等同于使用变量或常量，例如： 10 number <h3 id="3-3-带参数方法练习（应用）"><a href="#3-3-带参数方法练习（应用）" class="headerlink" title="3.3 带参数方法练习（应用）"></a>3.3 带参数方法练习（应用）</h3>需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数<br>思路：<br> ①定义一个方法，用于打印两个数字中的较大数，例如getMax()<br> ②为方法定义两个参数，用于接收两个数字<br> ③使用分支语句分两种情况对两个数字的大小关系进行处理<br> ④在main()方法中调用定义好的方法（使用常量）<br> ⑤在main()方法中调用定义好的方法（使用变量）<br>代码：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法（使用常量）        </span></span><br><span class="line">        getMax(<span class="number">10</span>,<span class="number">20</span>);        </span><br><span class="line">        <span class="comment">//调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的        </span></span><br><span class="line">        <span class="comment">//getMax(30);        </span></span><br><span class="line">        <span class="comment">//getMax(10.0,20.0);</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法（使用变量）        </span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;        </span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;        </span><br><span class="line">        getMax(a, b);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于打印两个数字中的较大数，例如getMax()    </span></span><br><span class="line">    <span class="comment">//为方法定义两个参数，用于接收两个数字    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理        </span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;            </span><br><span class="line">            System.out.println(a);        </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">                System.out.println(b);        </span><br><span class="line">                &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>














</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>4.1 数组</title>
    <url>/2020/06/22/4.1%20%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><h3 id="1-1什么是数组【理解】"><a href="#1-1什么是数组【理解】" class="headerlink" title="1.1什么是数组【理解】"></a>1.1什么是数组【理解】</h3><p>数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p>
<h3 id="1-2数组定义格式【记忆】"><a href="#1-2数组定义格式【记忆】" class="headerlink" title="1.2数组定义格式【记忆】"></a>1.2数组定义格式【记忆】</h3><h4 id="1-2-1第一种"><a href="#1-2-1第一种" class="headerlink" title="1.2.1第一种"></a>1.2.1第一种</h4><p>数据类型[] 数组名<br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;        </span><br><span class="line"><span class="keyword">double</span>[] arr;      </span><br><span class="line"><span class="keyword">char</span>[] arr;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-2第二种"><a href="#1-2-2第二种" class="headerlink" title="1.2.2第二种"></a>1.2.2第二种</h4><p>数据类型 数组名[]<br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[];        </span><br><span class="line"><span class="keyword">double</span> arr[];      </span><br><span class="line"><span class="keyword">char</span> arr[];</span><br></pre></td></tr></table></figure>
<h3 id="1-3数组动态初始化【应用】"><a href="#1-3数组动态初始化【应用】" class="headerlink" title="1.3数组动态初始化【应用】"></a>1.3数组动态初始化【应用】</h3><h4 id="1-3-1什么是动态初始化"><a href="#1-3-1什么是动态初始化" class="headerlink" title="1.3.1什么是动态初始化"></a>1.3.1什么是动态初始化</h4><p>数组动态初始化就是只给定数组的长度，由系统给出默认初始化值 </p>
<h4 id="1-3-2动态初始化格式"><a href="#1-3-2动态初始化格式" class="headerlink" title="1.3.2动态初始化格式"></a>1.3.2动态初始化格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<h4 id="1-3-3动态初始化格式详解"><a href="#1-3-3动态初始化格式详解" class="headerlink" title="1.3.3动态初始化格式详解"></a>1.3.3动态初始化格式详解</h4><p>等号左边：<br>    int:数组的数据类型<br>    []:代表这是一个数组<br>    arr:代表数组的名称<br>等号右边：<br>new:为数组开辟内存空间<br>int:数组的数据类型<br>[]:代表这是一个数组<br>5:代表数组的长度 </p>
<h3 id="1-4数组元素访问【应用】"><a href="#1-4数组元素访问【应用】" class="headerlink" title="1.4数组元素访问【应用】"></a>1.4数组元素访问【应用】</h3><h4 id="1-4-1什么是索引"><a href="#1-4-1什么是索引" class="headerlink" title="1.4.1什么是索引"></a>1.4.1什么是索引</h4><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。<br>这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。 </p>
<h4 id="1-4-2访问数组元素格式"><a href="#1-4-2访问数组元素格式" class="headerlink" title="1.4.2访问数组元素格式"></a>1.4.2访问数组元素格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组名[索引];</span><br></pre></td></tr></table></figure>
<h4 id="1-4-3示例代码"><a href="#1-4-3示例代码" class="headerlink" title="1.4.3示例代码"></a>1.4.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//输出数组名        </span></span><br><span class="line">        System.out.println(arr); <span class="comment">//[I@880ec60</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//输出数组中的元素        </span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-5内存分配【理解】"><a href="#1-5内存分配【理解】" class="headerlink" title="1.5内存分配【理解】"></a>1.5内存分配【理解】</h3><h4 id="1-5-1内存概述"><a href="#1-5-1内存概述" class="headerlink" title="1.5.1内存概述"></a>1.5.1内存概述</h4><p>内存是计算机中的重要原件，临时存储区域，作用是运行程序。<br>我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。<br>必须放进内存中才能运行，运行完毕后会清空内存。<br>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。</p>
<h4 id="1-5-2java中的内存分配"><a href="#1-5-2java中的内存分配" class="headerlink" title="1.5.2java中的内存分配"></a>1.5.2java中的内存分配</h4><p>目前我们只需要记住两个内存，分别是：栈内存和堆内存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">区域名称         作用</span><br><span class="line">寄存器           给CPU使用，和我们开发无关。</span><br><span class="line">本地方法栈       JVM在使用操作系统功能的时候使用，和我们开发无关。</span><br><span class="line">方法区           存储可以运行的class文件。</span><br><span class="line">堆内存           存储对象或者数组，new来创建的，都存储在堆内存。</span><br><span class="line">方法栈           方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</span><br></pre></td></tr></table></figure>
<h3 id="1-6单个数组的内存图【理解】"><a href="#1-6单个数组的内存图【理解】" class="headerlink" title="1.6单个数组的内存图【理解】"></a>1.6单个数组的内存图【理解】</h3><h3 id="1-7多个数组的内存图【理解】"><a href="#1-7多个数组的内存图【理解】" class="headerlink" title="1.7多个数组的内存图【理解】"></a>1.7多个数组的内存图【理解】</h3><h3 id="1-8多个数组指向相同内存图【理解】"><a href="#1-8多个数组指向相同内存图【理解】" class="headerlink" title="1.8多个数组指向相同内存图【理解】"></a>1.8多个数组指向相同内存图【理解】</h3><h3 id="1-9数组静态初始化【应用】"><a href="#1-9数组静态初始化【应用】" class="headerlink" title="1.9数组静态初始化【应用】"></a>1.9数组静态初始化【应用】</h3><h4 id="1-9-1什么是静态初始化"><a href="#1-9-1什么是静态初始化" class="headerlink" title="1.9.1什么是静态初始化"></a>1.9.1什么是静态初始化</h4><p>在创建数组时，直接将元素确定 </p>
<h4 id="1-9-2静态初始化格式"><a href="#1-9-2静态初始化格式" class="headerlink" title="1.9.2静态初始化格式"></a>1.9.2静态初始化格式</h4><p>完整版格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure>
<p>简化版格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="1-9-3示例代码"><a href="#1-9-3示例代码" class="headerlink" title="1.9.3示例代码"></a>1.9.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义数组        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//输出数组名        </span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//输出数组中的元素        </span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-10数组操作的两个常见小问题【应用】"><a href="#1-10数组操作的两个常见小问题【应用】" class="headerlink" title="1.10数组操作的两个常见小问题【应用】"></a>1.10数组操作的两个常见小问题【应用】</h3><h4 id="1-10-1索引越界异常"><a href="#1-10-1索引越界异常" class="headerlink" title="1.10.1索引越界异常"></a>1.10.1索引越界异常</h4><p>出现原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];        </span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。<br>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不<br>能出现的，一旦出现了，就必须要修改我们编写的代码。<br>解决方案<br>将错误的索引修改为正确的索引范围即可!</p>
<h4 id="1-10-2空指针异常"><a href="#1-10-2空指针异常" class="headerlink" title="1.10.2空指针异常"></a>1.10.2空指针异常</h4><p>出现原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//把null赋值给数组        </span></span><br><span class="line">        arr = <span class="keyword">null</span>;        </span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时<br>候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必<br>须要修改我们编写的代码。<br>解决方案<br>给数组一个真正的堆内存空间引用即可！ </p>
<h3 id="1-11数组遍历【应用】"><a href="#1-11数组遍历【应用】" class="headerlink" title="1.11数组遍历【应用】"></a>1.11数组遍历【应用】</h3><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;        </span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);        </span><br><span class="line">        System.out.println(arr[<span class="number">4</span>]);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们<br>需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义数组        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//使用通用的遍历格式        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;            </span><br><span class="line">            System.out.println(arr[x]);        </span><br><span class="line">            &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-12数组最值【应用】"><a href="#1-12数组最值【应用】" class="headerlink" title="1.12数组最值【应用】"></a>1.12数组最值【应用】</h3><p>最大值获取：从数组的所有元素中找出最大值。<br>实现思路：<br>定义变量，保存数组0索引上的元素<br>遍历数组，获取出数组中的每个元素<br>将遍历到的元素和保存数组0索引上值的变量进行比较<br>如果数组元素的值大于了变量的值，变量记录住新的值<br>数组循环遍历结束，变量保存的就是数组中的最大值<br>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义数组        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">60</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//定义一个变量，用于保存最大值        </span></span><br><span class="line">        <span class="comment">//取数组中第一个数据作为变量的初始值        </span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//与数组中剩余的数据逐个比对，每次比对将最大值保存到变量中        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++) &#123;            </span><br><span class="line">            <span class="keyword">if</span>(arr[x] &gt; max) &#123;                </span><br><span class="line">                max = arr[x];</span><br><span class="line">                &#125;        </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//循环结束后打印变量的值        </span></span><br><span class="line">        System.out.println(<span class="string">"max:"</span> + max);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>5.5 方法的注意事项</title>
    <url>/2020/06/22/5.5%20%E6%96%B9%E6%B3%95%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="5-方法的注意事项"><a href="#5-方法的注意事项" class="headerlink" title="5. 方法的注意事项"></a>5. 方法的注意事项</h2><h3 id="5-1-方法的注意事项（掌握）"><a href="#5-1-方法的注意事项（掌握）" class="headerlink" title="5.1 方法的注意事项（掌握）"></a>5.1 方法的注意事项（掌握）</h3><p>方法不能嵌套定义<br>    示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;            </span><br><span class="line">                <span class="comment">// 这里会引发编译错误!!!        </span></span><br><span class="line">            &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据<br>    示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//return 100; 编译错误，因为没有具体返回值类型        </span></span><br><span class="line">        <span class="keyword">return</span>;         </span><br><span class="line">        <span class="comment">//System.out.println(100); </span></span><br><span class="line">        <span class="keyword">return</span>语句后面不能跟数据或代码    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-方法的通用格式（掌握）"><a href="#5-2-方法的通用格式（掌握）" class="headerlink" title="5.2 方法的通用格式（掌握）"></a>5.2 方法的通用格式（掌握）</h3><pre><code>格式：</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123;   </span><br><span class="line">    方法体;    </span><br><span class="line">    <span class="keyword">return</span> 数据 ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解释：<br>    public static 修饰符，目前先记住这个格式<br>    返回值类型 方法操作完毕之后返回的数据的数据类型<br>  如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法名        调用方法时候使用的标识</span><br><span class="line"> </span><br><span class="line"> 参数     由数据类型和变量名组成，多个参数之间用逗号隔开</span><br><span class="line"> </span><br><span class="line"> 方法体        完成功能的代码块</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">return</span>     如果方法操作完毕，有数据返回，用于把数据返回给调用者</span><br></pre></td></tr></table></figure>
<p>定义方法时，要做到两个明确<br>    明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应<br>    的数据类型<br>    明确参数：主要是明确参数的类型和数量<br>调用方法时的注意：<br>    void类型的方法，直接调用即可<br>    非void类型的方法，推荐用变量接收调用 </p>
]]></content>
  </entry>
  <entry>
    <title>6.1 Debug模式</title>
    <url>/2020/06/22/6.1%20Debug%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-Debug模式"><a href="#1-Debug模式" class="headerlink" title="1.Debug模式"></a>1.Debug模式</h2><h3 id="1-1什么是Debug模式【理解】"><a href="#1-1什么是Debug模式【理解】" class="headerlink" title="1.1什么是Debug模式【理解】"></a>1.1什么是Debug模式【理解】</h3><p>是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。 </p>
<h3 id="1-2Debug模式操作流程【应用】"><a href="#1-2Debug模式操作流程【应用】" class="headerlink" title="1.2Debug模式操作流程【应用】"></a>1.2Debug模式操作流程【应用】</h3><pre><code>如何加断点 
    选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可</code></pre><p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.png" alt=""></p>
<p>如何运行加了断点的程序 </p>
<p>​        在代码区域右键Debug执行</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.2.png" alt=""></p>
<p>看哪里 </p>
<p>​        看Debugger窗口</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.3.png" alt=""></p>
<p>看Console窗口</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.4.png" alt=""></p>
<p>点哪里 </p>
<p>​        点Step Into (F7)这个箭头，也可以直接按F7</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.5.png" alt=""></p>
<p>如何删除断点</p>
<p>​        选择要删除的断点，单击鼠标左键即可</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.6.png" alt=""></p>
<p>如果是多个断点，可以每一个再点击一次。也可以一次性全部删除</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C6.1.7.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>5.4 带返回值方法的定义和调用</title>
    <url>/2020/06/22/5.4%20%E5%B8%A6%E8%BF%94%E5%9B%9E%E5%80%BC%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="4-带返回值方法的定义和调用"><a href="#4-带返回值方法的定义和调用" class="headerlink" title="4. 带返回值方法的定义和调用"></a>4. 带返回值方法的定义和调用</h2><h3 id="4-1-带返回值方法定义和调用（掌握）"><a href="#4-1-带返回值方法定义和调用（掌握）" class="headerlink" title="4.1 带返回值方法定义和调用（掌握）"></a>4.1 带返回值方法定义和调用（掌握）</h3><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123;     </span><br><span class="line">    <span class="keyword">return</span> 数据 ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEvenNumber</span><span class="params">( <span class="keyword">int</span> number )</span> </span>&#123;               </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span> ; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span>  <span class="number">100</span> ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>注意： 
    方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</code></pre><p>调用格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名 ( 参数 ) ; </span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 ) ;</span><br></pre></td></tr></table></figure>
<p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isEvenNumber ( <span class="number">5</span> ) ; </span><br><span class="line"><span class="keyword">boolean</span>  flag =  isEvenNumber ( <span class="number">5</span> );</span><br></pre></td></tr></table></figure>
<pre><code>注意： 
    方法的返回值通常会使用变量接收，否则该返回值将无意</code></pre><h3 id="4-2-带返回值方法练习（应用）"><a href="#4-2-带返回值方法练习（应用）" class="headerlink" title="4.2 带返回值方法练习（应用）"></a>4.2 带返回值方法练习（应用）</h3><p>需求：设计一个方法可以获取两个数的较大值，数据来自于参数<br>思路：<br>    ①定义一个方法，用于获取两个数字中的较大数<br>    ②使用分支语句分两种情况对两个数字的大小关系进行处理<br>    ③根据题设分别设置两种情况下对应的返回结果<br>    ④在main()方法中调用定义好的方法并使用变量保存<br>    ⑤在main()方法中调用定义好的方法并直接打印结果<br>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法并使用变量保存        </span></span><br><span class="line">        <span class="keyword">int</span> result = getMax(<span class="number">10</span>,<span class="number">20</span>);        </span><br><span class="line">        System.out.println(result);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法并直接打印结果        </span></span><br><span class="line">        System.out.println(getMax(<span class="number">10</span>,<span class="number">20</span>));    </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义一个方法，用于获取两个数字中的较大数    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;        </span><br><span class="line">    <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理        </span></span><br><span class="line">    <span class="comment">//根据题设分别设置两种情况下对应的返回结果        </span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;            </span><br><span class="line">            <span class="keyword">return</span> a;        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">return</span> b;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>5.6 方法重载</title>
    <url>/2020/06/22/5.6%20%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="6-方法重载"><a href="#6-方法重载" class="headerlink" title="6. 方法重载"></a>6. 方法重载</h2><h3 id="6-1-方法重载（理解）"><a href="#6-1-方法重载（理解）" class="headerlink" title="6.1 方法重载（理解）"></a>6.1 方法重载（理解）</h3><pre><code>方法重载概念 
方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载
    多个方法在同一个类中 
    多个方法具有相同的方法名 
    多个方法的参数不相同，类型不同或者数量不同 
注意： 
    重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式 
    重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两 
    个方法是否相互构成重载 
正确范例：</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;   <span class="comment">/*错误原因：重载与返回值无关*/</span>        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法体    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span>        </span><br><span class="line">    <span class="comment">//方法体    </span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-方法重载练习（掌握）"><a href="#6-2-方法重载练习（掌握）" class="headerlink" title="6.2 方法重载练习（掌握）"></a>6.2 方法重载练习（掌握）</h3><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long）<br>思路：<br>    ①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数<br>    ②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数<br>    ③定义所有的重载方法，两个byte类型与两个short类型参数<br>    ④完成方法的调用，测试运行结果<br>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//调用方法        </span></span><br><span class="line">        System.out.println(compare(<span class="number">10</span>, <span class="number">20</span>));        </span><br><span class="line">        System.out.println(compare((<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">20</span>));        </span><br><span class="line">        System.out.println(compare((<span class="keyword">short</span>) <span class="number">10</span>, (<span class="keyword">short</span>) <span class="number">20</span>));        </span><br><span class="line">        System.out.println(compare(<span class="number">10L</span>, <span class="number">20L</span>));    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//int    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"int"</span>);        </span><br><span class="line">        <span class="keyword">return</span> a == b;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//byte    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">byte</span> a, <span class="keyword">byte</span> b)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"byte"</span>);        </span><br><span class="line">        <span class="keyword">return</span> a == b;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//short    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">short</span> a, <span class="keyword">short</span> b)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"short"</span>);        </span><br><span class="line">        <span class="keyword">return</span> a == b;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//long    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"long"</span>);        </span><br><span class="line">        <span class="keyword">return</span> a == b;    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>6.2 基础练习</title>
    <url>/2020/06/22/6.2%20%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="2-基础练习"><a href="#2-基础练习" class="headerlink" title="2.基础练习"></a>2.基础练习</h2><h3 id="2-1减肥计划if版本【应用】"><a href="#2-1减肥计划if版本【应用】" class="headerlink" title="2.1减肥计划if版本【应用】"></a>2.1减肥计划if版本【应用】</h3><h4 id="2-1-1案例需求"><a href="#2-1-1案例需求" class="headerlink" title="2.1.1案例需求"></a>2.1.1案例需求</h4><p>输入星期数，显示今天的减肥活动   周一：跑步   周二：游泳   周三：慢走   周四：动感单车   周五：拳击   周六：爬山<br>  周日：好好吃一顿 </p>
<h4 id="2-1-2代码实现"><a href="#2-1-2代码实现" class="headerlink" title="2.1.2代码实现"></a>2.1.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">    思路：        </span></span><br><span class="line"><span class="comment">        1:键盘录入一个星期数，用一个变量接收        </span></span><br><span class="line"><span class="comment">        2:对星期数进行判断，这里用 if 语句实现        </span></span><br><span class="line"><span class="comment">        3:在对应的语句控制中输出对应的减肥活动</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//键盘录入一个星期数，用一个变量接收        </span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"请输入一个星期数："</span>);        </span><br><span class="line">        <span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//对星期数进行判断，这里用 if 语句实现        </span></span><br><span class="line">        <span class="keyword">if</span> (week &lt; <span class="number">1</span> || week &gt; <span class="number">7</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"你输入的星期数有误"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">1</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"跑步"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">2</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"游泳"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">3</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"慢走"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">4</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"动感单车"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">5</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"拳击"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">6</span>) &#123;            </span><br><span class="line">            System.out.println(<span class="string">"爬山"</span>);        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            System.out.println(<span class="string">"好好吃一顿"</span>);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2减肥计划switch版本【应用】"><a href="#2-2减肥计划switch版本【应用】" class="headerlink" title="2.2减肥计划switch版本【应用】"></a>2.2减肥计划switch版本【应用】</h3><h4 id="2-2-1案例需求"><a href="#2-2-1案例需求" class="headerlink" title="2.2.1案例需求"></a>2.2.1案例需求</h4><p>输入星期数，显示今天的减肥活动   周一：跑步   周二：游泳   周三：慢走   周四：动感单车   周五：拳击   周六：爬山<br>  周日：好好吃一顿 </p>
<h4 id="2-2-2代码实现"><a href="#2-2-2代码实现" class="headerlink" title="2.2.2代码实现"></a>2.2.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">    思路：        </span></span><br><span class="line"><span class="comment">        1:键盘录入一个星期数，用一个变量接收        </span></span><br><span class="line"><span class="comment">        2:对星期数进行判断，这里用 switch 语句实现        </span></span><br><span class="line"><span class="comment">        3:在对应的语句控制中输出对应的减肥活动</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    导包：        </span></span><br><span class="line"><span class="comment">        1:手动导包  import java.util.Scanner;        </span></span><br><span class="line"><span class="comment">        2:快捷键导包 Alt+Enter        </span></span><br><span class="line"><span class="comment">        3:自动导包 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//键盘录入一个星期数，用一个变量接收</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">"请输入一个星期数："</span>);        </span><br><span class="line">        <span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//对星期数进行判断，这里用 switch 语句实现        </span></span><br><span class="line">        <span class="keyword">switch</span> (week) &#123;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:                </span><br><span class="line">            System.out.println(<span class="string">"跑步"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:                </span><br><span class="line">            System.out.println(<span class="string">"游泳"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:                </span><br><span class="line">            System.out.println(<span class="string">"慢走"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:                </span><br><span class="line">            System.out.println(<span class="string">"动感单车"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:                </span><br><span class="line">            System.out.println(<span class="string">"拳击"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:                </span><br><span class="line">            System.out.println(<span class="string">"爬山"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:                </span><br><span class="line">            System.out.println(<span class="string">"好好吃一顿"</span>);                </span><br><span class="line">            <span class="keyword">break</span>;            </span><br><span class="line">            <span class="keyword">default</span>:                </span><br><span class="line">            System.out.println(<span class="string">"你输入的星期数有误"</span>);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3逢七跳过【应用】"><a href="#2-3逢七跳过【应用】" class="headerlink" title="2.3逢七跳过【应用】"></a>2.3逢七跳过【应用】</h3><h4 id="2-3-1案例需求"><a href="#2-3-1案例需求" class="headerlink" title="2.3.1案例需求"></a>2.3.1案例需求</h4><p>朋友聚会的时候可能会玩一个游戏：逢七过。<br>规则是：从任意一个数字开始报数，当你要报的数字包含7或者是7 的倍数时都要说：过。<br>为了帮助大家更好的玩这个游戏，这里我们直接在控制台打印出1-100之间的满足逢七必过<br>规则的数据。   这样，大家将来在玩游戏的时候，就知道哪些数据要说：过。 </p>
<h4 id="2-3-2代码实现"><a href="#2-3-2代码实现" class="headerlink" title="2.3.2代码实现"></a>2.3.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">    思路：        </span></span><br><span class="line"><span class="comment">        1:数据在1-100之间，用for循环实现数据的获取        </span></span><br><span class="line"><span class="comment">        2:根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除        </span></span><br><span class="line"><span class="comment">        3:在控制台输出满足规则的数据 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据在1-100之间，用for循环实现数据的获取        </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">100</span>; x++) &#123;            </span><br><span class="line">                <span class="comment">//根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除            </span></span><br><span class="line">                <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">7</span> || x/<span class="number">10</span>%<span class="number">10</span>==<span class="number">7</span> || x%<span class="number">7</span>==<span class="number">0</span>) &#123;                </span><br><span class="line">                <span class="comment">//在控制台输出满足规则的数据                </span></span><br><span class="line">                    System.out.println(x);            </span><br><span class="line">                &#125;        </span><br><span class="line">            &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4不死神兔【应用】"><a href="#2-4不死神兔【应用】" class="headerlink" title="2.4不死神兔【应用】"></a>2.4不死神兔【应用】</h3><h4 id="2-4-1案例需求"><a href="#2-4-1案例需求" class="headerlink" title="2.4.1案例需求"></a>2.4.1案例需求</h4><p>有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都<br>不死，问第二十个月的兔子对数为多少？ </p>
<h4 id="2-4-2代码实现"><a href="#2-4-2代码实现" class="headerlink" title="2.4.2代码实现"></a>2.4.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   </span></span><br><span class="line"><span class="comment">    思路：        </span></span><br><span class="line"><span class="comment">        1:为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20        </span></span><br><span class="line"><span class="comment">        2:因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1        </span></span><br><span class="line"><span class="comment">        3:用循环实现计算每个月的兔子对数        </span></span><br><span class="line"><span class="comment">        4:输出数组中最后一个元素的值，就是第20个月的兔子对数 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1        </span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;        </span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//用循环实现计算每个月的兔子对数        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">2</span>; x&lt;arr.length; x++) &#123;            </span><br><span class="line">            arr[x] = arr[x-<span class="number">2</span>] + arr[x-<span class="number">1</span>];        </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//输出数组中最后一个元素的值，就是第20个月的兔子对数        </span></span><br><span class="line">        System.out.println(<span class="string">"第二十个月兔子的对数是："</span> + arr[<span class="number">19</span>]);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5百钱白鸡【应用】"><a href="#2-5百钱白鸡【应用】" class="headerlink" title="2.5百钱白鸡【应用】"></a>2.5百钱白鸡【应用】</h3><h4 id="2-5-1案例需求"><a href="#2-5-1案例需求" class="headerlink" title="2.5.1案例需求"></a>2.5.1案例需求</h4><p>我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱<br>买百鸡，问鸡翁、鸡母、鸡雏各几何？</p>
<h4 id="2-5-2代码实现"><a href="#2-5-2代码实现" class="headerlink" title="2.5.2代码实现"></a>2.5.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment">    思路：        </span></span><br><span class="line"><span class="comment">        1:第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20        </span></span><br><span class="line"><span class="comment">        2:第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33        </span></span><br><span class="line"><span class="comment">        3:这个时候，用于表示鸡雏的变量 z = 100 – x – y        </span></span><br><span class="line"><span class="comment">        4:判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立，如果成立，输出对应的 </span></span><br><span class="line"><span class="comment">        x，y，z 的值，就是对应的鸡翁，鸡母，鸡雏的值 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;=<span class="number">20</span>; x++) &#123;            </span><br><span class="line">            <span class="comment">//第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33            </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;=<span class="number">33</span>; y++) &#123;                </span><br><span class="line">                <span class="comment">//这个时候，用于表示鸡雏的变量 z = 100 – x – y                </span></span><br><span class="line">                <span class="keyword">int</span> z = <span class="number">100</span> - x - y;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立                </span></span><br><span class="line">                <span class="keyword">if</span>(z%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; <span class="number">5</span>*x+<span class="number">3</span>*y+z/<span class="number">3</span>==<span class="number">100</span>) &#123;                    </span><br><span class="line">                    System.out.println(x+<span class="string">","</span>+y+<span class="string">","</span>+z);                </span><br><span class="line">                &#125;            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6数组元素求和【应用】"><a href="#2-6数组元素求和【应用】" class="headerlink" title="2.6数组元素求和【应用】"></a>2.6数组元素求和【应用】</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>有这样的一个数组，元素是{68,27,95,88,171,996,51,210}。求出该数组中满足要求的元素和，   要求是：求和的元<br>素个位和十位都不能是7，并且只能是偶数 </p>
<h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*   </span></span><br><span class="line"><span class="comment">    思路：        </span></span><br><span class="line"><span class="comment">        1:定义一个数组，用静态初始化完成数组元素的初始化        </span></span><br><span class="line"><span class="comment">        2:定义一个求和变量，初始值是0        </span></span><br><span class="line"><span class="comment">        3:遍历数组，获取到数组中的每一个元素        </span></span><br><span class="line"><span class="comment">        4:判断该元素是否满足条件，如果满足条件就累加        </span></span><br><span class="line"><span class="comment">        5:输出求和变量的值 </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素的初始化        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">68</span>, <span class="number">27</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">171</span>, <span class="number">996</span>, <span class="number">51</span>, <span class="number">210</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//定义一个求和变量，初始值是0        </span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历数组，获取到数组中的每一个元素        </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;            </span><br><span class="line">            <span class="comment">//判断该元素是否满足条件，如果满足条件就累加            </span></span><br><span class="line">            <span class="keyword">if</span>(arr[x]%<span class="number">10</span>!=<span class="number">7</span> &amp;&amp; arr[x]/<span class="number">10</span>%<span class="number">10</span>!=<span class="number">7</span> &amp;&amp; arr[x]%<span class="number">2</span>==<span class="number">0</span>) &#123;                </span><br><span class="line">                sum += arr[x];            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//输出求和变量的值        </span></span><br><span class="line">        System.out.println(<span class="string">"sum:"</span> + sum);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-7判断两个数组是否相同【应用】"><a href="#2-7判断两个数组是否相同【应用】" class="headerlink" title="2.7判断两个数组是否相同【应用】"></a>2.7判断两个数组是否相同【应用】</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>定义一个方法，用于比较两个数组的内容是否相同 </p>
<h4 id="2-7-2代码实现"><a href="#2-7-2代码实现" class="headerlink" title="2.7.2代码实现"></a>2.7.2代码实现</h4><p>/*    思路：        1:定义两个数组，分别使用静态初始化完成数组元素的初始化        2:定义一个方法，用于比较两个数组的内容是否相同        3:比较两个数组的内容是否相同，按照下面的步骤实现就可以了            首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false            其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false            最后循环遍历结束后，返回true        4:调用方法，用变量接收        5:输出结果 */ public class Test07 {    public static void main(String[] args) {        //定义两个数组，分别使用静态初始化完成数组元素的初始化        int[] arr = {11, 22, 33, 44, 55};        //int[] arr2 = {11, 22, 33, 44, 55};        int[] arr2 = {11, 22, 33, 44, 5};</p>
<pre><code>    //调用方法，用变量接收        boolean flag = compare(arr,arr2);        //输出结果        System.out.println(flag);    }

//定义一个方法，用于比较两个数组的内容是否相同    /*        两个明确：            返回值类型：boolean            参数：int[] arr, int[] arr2     */</code></pre>]]></content>
  </entry>
  <entry>
    <title>5.2 方法的定义和调用</title>
    <url>/2020/06/22/5.2%20%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h2 id="2-方法的定义和调用"><a href="#2-方法的定义和调用" class="headerlink" title="2. 方法的定义和调用"></a>2. 方法的定义和调用</h2><h3 id="2-1-无参数方法定义和调用（掌握）"><a href="#2-1-无参数方法定义和调用（掌握）" class="headerlink" title="2.1 无参数方法定义和调用（掌握）"></a>2.1 无参数方法定义和调用（掌握）</h3><p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (   ) &#123;    </span><br><span class="line">    <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">(    )</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// 方法体; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure>
<p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">method();</span><br></pre></td></tr></table></figure>
<p>注意： 方法必须先定义，后调用，否则程序将报错 </p>
<h3 id="2-2-方法调用过程图解（理解）"><a href="#2-2-方法调用过程图解（理解）" class="headerlink" title="2.2 方法调用过程图解（理解）"></a>2.2 方法调用过程图解（理解）</h3><p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C5.2.2.png" alt=""></p>
<p>总结：每个方法在被调用执行的时候，都会进入栈内存，并且拥有自己独立的内存空间，方法内部代码调用 完毕之后，会从栈内存中弹栈消失</p>
<h3 id="2-3-无参数方法的练习（应用）"><a href="#2-3-无参数方法的练习（应用）" class="headerlink" title="2.3 无参数方法的练习（应用）"></a>2.3 无参数方法的练习（应用）</h3><p>需求：设计一个方法用于打印两个数中的较大数<br>思路：<br>    ①定义一个方法，用于打印两个数字中的较大数，例如getMax()<br>    ②方法中定义两个变量，用于保存两个数字<br>    ③使用分支语句分两种情况对两个数字的大小关系进行处理<br>    ④在main()方法中调用定义好的方法<br>    代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法        </span></span><br><span class="line">        getMax();    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义一个方法，用于打印两个数字中的较大数，例如getMax()    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//方法中定义两个变量，用于保存两个数字        </span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;        </span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理</span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;            </span><br><span class="line">            System.out.println(a);        </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">                System.out.println(b);        </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>5.7 方法的参数传递</title>
    <url>/2020/06/22/5.7%20%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h2 id="7-方法的参数传递"><a href="#7-方法的参数传递" class="headerlink" title="7. 方法的参数传递"></a>7. 方法的参数传递</h2><h3 id="7-1-方法参数传递基本类型（理解）"><a href="#7-1-方法参数传递基本类型（理解）" class="headerlink" title="7.1 方法参数传递基本类型（理解）"></a>7.1 方法参数传递基本类型（理解）</h3><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;        </span><br><span class="line">        System.out.println(<span class="string">"调用change方法前："</span> + number);        </span><br><span class="line">        change(number);        </span><br><span class="line">        System.out.println(<span class="string">"调用change方法后："</span> + number);    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;        </span><br><span class="line">        number = <span class="number">200</span>;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：<br>    基本数据类型的参数，形式参数的改变，不影响实际参数<br>结论依据：<br>    每个方法在栈内存中，都会有独立的栈空间，方法运行结束后就会弹栈消失</p>
<p> <img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.1.png" alt=""></p>
<h3 id="7-2-方法参数传递引用类型（理解）"><a href="#7-2-方法参数传递引用类型（理解）" class="headerlink" title="7.2 方法参数传递引用类型（理解）"></a>7.2 方法参数传递引用类型（理解）</h3><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;        </span><br><span class="line">        System.out.println(<span class="string">"调用change方法前："</span> + arr[<span class="number">1</span>]);        </span><br><span class="line">        change(arr);        </span><br><span class="line">        System.out.println(<span class="string">"调用change方法后："</span> + arr[<span class="number">1</span>]);    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;        </span><br><span class="line">     arr[<span class="number">1</span>] = <span class="number">200</span>;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结论：<br>    对于引用类型的参数，形式参数的改变，影响实际参数的值<br>结论依据：<br>    引用数据类型的传参，传入的是地址值，内存中会造成两个引用指向同一个内存的效果，所以即使方法<br>    弹栈，堆内存中的数据也已经是改变后的结果</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.2.png" alt=""></p>
<h3 id="7-3-数组遍历（应用）"><a href="#7-3-数组遍历（应用）" class="headerlink" title="7.3 数组遍历（应用）"></a>7.3 数组遍历（应用）</h3><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]<br>思路：<br>    ①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);<br>    System.out.println(“内容”); 输出内容并换行<br>    System.out.print(“内容”); 输出内容不换行<br>    System.out.println(); 起到换行的作用<br>    ②定义一个数组，用静态初始化完成数组元素初始化<br>    ③定义一个方法，用数组遍历通用格式对数组进行遍历<br>    ④用新的输出语句修改遍历操作<br>    ⑤调用遍历方法<br>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest01</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素初始化        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//调用方法        </span></span><br><span class="line">        printArray(arr);    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//定义一个方法，用数组遍历通用格式对数组进行遍历    </span></span><br><span class="line">    <span class="comment">/*        </span></span><br><span class="line"><span class="comment">    两个明确：            </span></span><br><span class="line"><span class="comment">    返回值类型：void            </span></span><br><span class="line"><span class="comment">    参数：int[] arr     </span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;        </span><br><span class="line">        System.out.print(<span class="string">"["</span>);        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == arr.length-<span class="number">1</span>) &#123;                </span><br><span class="line">            System.out.print(arr[x]);            </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">                System.out.print(arr[x]+<span class="string">", "</span>);            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        System.out.println(<span class="string">"]"</span>);    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-4-数组最大值（应用）"><a href="#7-4-数组最大值（应用）" class="headerlink" title="7.4 数组最大值（应用）"></a>7.4 数组最大值（应用）</h3><p>需求：设计一个方法用于获取数组中元素的最大值<br>思路：<br>    ①定义一个数组，用静态初始化完成数组元素初始化<br>    ②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了<br>    ③调用获取最大值方法，用变量接收返回结果<br>    ④把结果输出在控制台<br>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest02</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素初始化        </span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">60</span>&#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//调用获取最大值方法，用变量接收返回结果        </span></span><br><span class="line">        <span class="keyword">int</span> number = getMax(arr);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//把结果输出在控制台        </span></span><br><span class="line">        System.out.println(<span class="string">"number:"</span> + number);    </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//定义一个方法，用来获取数组中的最大值    </span></span><br><span class="line">        <span class="comment">/*        </span></span><br><span class="line"><span class="comment">        两个明确：            </span></span><br><span class="line"><span class="comment">        返回值类型：int            </span></span><br><span class="line"><span class="comment">        参数：int[] arr     </span></span><br><span class="line"><span class="comment">        */</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++) &#123;            </span><br><span class="line">            <span class="keyword">if</span>(arr[x] &gt; max) &#123;                </span><br><span class="line">                max = arr[x];            </span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;        </span><br><span class="line">        <span class="keyword">return</span> max;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>10.2 继承</title>
    <url>/2020/06/23/10.2%20%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h1 id="第二章-继承"><a href="#第二章-继承" class="headerlink" title="第二章 继承"></a>第二章 继承</h1><p>面向对象语言的三大特征:封装,继承,多态</p>
<p>是什么   怎么用    什么时候用</p>
<h2 id="2-1-继承概述"><a href="#2-1-继承概述" class="headerlink" title="2.1 继承概述"></a>2.1 继承概述</h2><h4 id="2-1-1-继承的含义"><a href="#2-1-1-继承的含义" class="headerlink" title="2.1.1 继承的含义"></a>2.1.1 继承的含义</h4><p><strong>继承</strong>：在java中指的是“一个类”可以“继承自”“另一个类”。 “被继承的类”叫做: 父类/超类/基类，”继承其他类的类”叫做:子类。继承后，“子类”中就“拥有”了“父类”中所有的成员(成员变量、成员方法)。 “子类就不需要再定义了”。</p>
<h4 id="2-1-2-继承的好处"><a href="#2-1-2-继承的好处" class="headerlink" title="2.1.2 继承的好处"></a>2.1.2 继承的好处</h4><ol>
<li>提高<strong>代码的复用性</strong>（减少代码冗余，相同代码重复利用）。</li>
<li>使类与类之间产生了关系。</li>
<li>是多态的前提</li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li><strong>继承</strong>：在java中指的是“一个类”可以“继承自”“另一个类”。 “被继承的类”叫做: 父类/超类/基类，”继承其他类的类”叫做:子类。继承后，“子类”中就“拥有”了“父类”中所有的成员(成员变量、成员方法)。 “子类就不需要再定义了”。</li>
</ul>
<h2 id="2-2-继承的格式"><a href="#2-2-继承的格式" class="headerlink" title="2.2 继承的格式"></a>2.2 继承的格式</h2><h4 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h4><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>需要注意</strong>：Java是单继承的，一个类只能继承一个直接父类，并且满足is-a的关系,例如:Dog is a Animal, Student is a Person</p>
<h4 id="继承的演示"><a href="#继承的演示" class="headerlink" title="继承的演示"></a>继承的演示</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">人类:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 功能方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃东西..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"睡觉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">老师类: extends 人类</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">测试:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        System.out.println(t.name);</span><br><span class="line">        System.out.println(t.age);</span><br><span class="line">        t.eat();</span><br><span class="line">        t.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 子类名 <span class="keyword">extends</span> 父类名</span>{

}
&lt;!--￼<span class="number">2</span>--&gt;
</code></pre>
</li>
</ul>
<h4 id="继承后私有成员的访问规则"><a href="#继承后私有成员的访问规则" class="headerlink" title="继承后私有成员的访问规则"></a>继承后私有成员的访问规则</h4><ul>
<li><p>父类的“私有成员”可以被子类继承，但子类不能被直接访问。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">100</span>;<span class="comment">//私有成员，只能在父类内部使用。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"私有成员方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">	    System.out.println(z.num);<span class="comment">// 编译错误</span></span><br><span class="line">        z.method();<span class="comment">// 编译错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="继承后非私有成员的访问规则"><a href="#继承后非私有成员的访问规则" class="headerlink" title="继承后非私有成员的访问规则"></a>继承后非私有成员的访问规则</h4><ul>
<li><p>当通过“子类”访问非私有成员时，先在子类中找，如果找到就使用子类的，找不到就继续去“父类”中找。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu 类中的成员方法method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">1</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Zi 类中的成员方法method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(z.money);<span class="comment">//1</span></span><br><span class="line">        z.method();<span class="comment">// Zi 类中的成员方法method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><ul>
<li>构造方法不能被继承</li>
<li>父类的“私有成员”可以被子类继承，但子类不能被直接访问。</li>
<li>当通过“子类”访问非私有成员时，先在子类中找，如果找到就使用子类的，找不到就继续去“父类”中找。  </li>
</ul>
<h2 id="2-4-方法重写"><a href="#2-4-方法重写" class="headerlink" title="2.4 方法重写"></a>2.4 方法重写</h2><h4 id="方法重写的概念"><a href="#方法重写的概念" class="headerlink" title="方法重写的概念"></a>方法重写的概念</h4><blockquote>
<p>子类觉得父类的方法不够好</p>
</blockquote>
<p><strong>方法重写</strong> ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我吃牛肉炖土豆..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;<span class="comment">//方法重写</span></span><br><span class="line">        System.out.println(<span class="string">"我吃红烧狮子头..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        zi.eat();<span class="comment">// 我吃红烧狮子头...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重写的注意事项"><a href="#重写的注意事项" class="headerlink" title="重写的注意事项"></a>重写的注意事项</h4><ul>
<li><p>方法重写是发生在子父类之间的关系。</p>
</li>
<li><p>子类方法重写父类方法，返回值类型、方法名和参数列表都要一模一样。</p>
</li>
<li><p>子类方法重写父类方法，必须要保证权限大于等于父类权限。</p>
<ul>
<li>访问权限从大到小:  public   protected   (默认)  private</li>
</ul>
</li>
<li><p>使用@Override注解，检验是否重写成功，重写注解校验！</p>
<ul>
<li>建议重写方法都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</li>
</ul>
</li>
</ul>
<h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><ul>
<li>方法重写:子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同）</li>
<li>校验方法重写或者标识方法重写,可以使用@Override注解</li>
</ul>
<h2 id="2-5-this和super关键字"><a href="#2-5-this和super关键字" class="headerlink" title="2.5 this和super关键字"></a>2.5 this和super关键字</h2><h4 id="this和super关键字的介绍"><a href="#this和super关键字的介绍" class="headerlink" title="this和super关键字的介绍"></a>this和super关键字的介绍</h4><ul>
<li>this：存储的“当前对象”的引用；<ul>
<li>this可以访问：本类的成员属性、成员方法、构造方法； </li>
</ul>
</li>
<li>super：存储的“父类对象”的引用；<ul>
<li>super可以访问：父类的成员属性、成员方法、构造方法； </li>
</ul>
</li>
</ul>
<h4 id="this关键字的三种用法"><a href="#this关键字的三种用法" class="headerlink" title="this关键字的三种用法"></a>this关键字的三种用法</h4><ul>
<li><p>this访问本类成员变量: <strong>this.成员变量</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    String name = <span class="string">"张三"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"李四"</span>;</span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);<span class="comment">// 李四</span></span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + <span class="keyword">this</span>.name);<span class="comment">// 张三</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>this访问本类成员方法: <strong>this.成员方法名();</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"show方法..."</span>);</span><br><span class="line">        <span class="keyword">this</span>.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>this访问本类构造方法: <strong>this()可以在本类的一个构造方法中，调用另一个构造方法</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空参构造方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();<span class="comment">//当使用this()调用另一个构造方法时，此代码必须是此构造方法的第一句有效代码。</span></span><br><span class="line">        System.out.println(<span class="string">"有参构造方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="super关键字的三种用法"><a href="#super关键字的三种用法" class="headerlink" title="super关键字的三种用法"></a>super关键字的三种用法</h4><ul>
<li><p>super访问父类的成员变量:  super.父类成员变量名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">1</span>;</span><br><span class="line">        System.out.println(“money : “ + money);<span class="comment">//1</span></span><br><span class="line">        System.out.println(“money : “ + money);<span class="comment">//10</span></span><br><span class="line">        System.out.println(“money：” + money);<span class="comment">//100 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>super访问父类的成员方法:  super.成员方法名();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类的show方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.show();</span><br><span class="line">        System.out.println(<span class="string">"子类的show方法..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">       zi.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>super访问父类的构造方法:  super()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu 类的空参构造方法.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu 类的有参构造方法.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">// 调用父类的空参构造方法</span></span><br><span class="line">        System.out.println(<span class="string">"Zi 类的空参构造方法.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);<span class="comment">// 调用父类的有参构造方法</span></span><br><span class="line">         System.out.println(<span class="string">"Zi 类的有参构造方法.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        Zi z2 = <span class="keyword">new</span> Zi(<span class="string">"刘德华"</span>, <span class="number">17</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><ul>
<li>this：存储的“当前对象”的引用；<ul>
<li>this可以访问：本类的成员属性、成员方法、构造方法； </li>
<li>this.成员变量: 会遇到, setXxx() 和 有参构造,  自动生成</li>
<li>this.成员方法: 一般不会使用</li>
<li>this() : 一般不会使用, 可能会在源代码中遇到</li>
</ul>
</li>
<li>super：存储的“父类对象”的引用；<ul>
<li>super可以访问：父类的成员属性、成员方法、构造方法； </li>
<li>super.成员变量: 一般不会使用</li>
<li>super.成员方法: 子类重写父类的方法之后, 还想继续调用父类被重写的方法</li>
<li>super() : 在子类的构造方法中使用, 自动生成</li>
</ul>
</li>
</ul>
<h2 id="2-6-super的注意事项"><a href="#2-6-super的注意事项" class="headerlink" title="2.6 super的注意事项"></a>2.6 super的注意事项</h2><h4 id="super的注意事项一"><a href="#super的注意事项一" class="headerlink" title="super的注意事项一"></a>super的注意事项一</h4><ul>
<li><p>super访问成员变量和成员方法: 优先去父类中找,如果有就直接使用,如果没有就去爷爷类中找,如果有,就用,依次类推…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ye</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Ye"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> <span class="keyword">extends</span> <span class="title">Ye</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Fu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a = <span class="number">30</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="keyword">super</span>.a);</span><br><span class="line">       <span class="keyword">super</span>.eat();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line">       zi.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="super的注意事项二"><a href="#super的注意事项二" class="headerlink" title="super的注意事项二"></a>super的注意事项二</h4><ul>
<li><p>子类的构造方法默认会调用父类的空参构造方法,如果父类中的没有空参构造方法,只定义了有参构造方法,会编译报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span></span>&#123;<span class="comment">// 编译报错</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="补充this和super的注意事项"><a href="#补充this和super的注意事项" class="headerlink" title="补充this和super的注意事项"></a>补充this和super的注意事项</h4><ul>
<li>this(参数)和super(参数), 必须出现在构造方法的第一行(第一条执行语句);</li>
<li>构造方法中, this()和super()只能有一个.</li>
<li>this和super不能出现在static修饰的静态方法中</li>
</ul>
<h2 id="2-7-继承体系对象的内存图"><a href="#2-7-继承体系对象的内存图" class="headerlink" title="2.7 继承体系对象的内存图"></a>2.7 继承体系对象的内存图</h2><h3 id="讲解"><a href="#讲解" class="headerlink" title="讲解:"></a>讲解:</h3><ul>
<li><p>继承体系内存图原理—父类空间优先于子类对象产生</p>
<p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造方法调用时，一定先调用父类的构造方法。</p>
</li>
<li><p>书写继承案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> numFu = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类中的method方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(<span class="string">"访问局部变量num:"</span>+num);</span><br><span class="line">        System.out.println(<span class="string">"访问本类成员变量num:"</span>+<span class="keyword">this</span>.num);</span><br><span class="line">        System.out.println(<span class="string">"访问父类成员变量num:"</span>+<span class="keyword">super</span>.num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.method();</span><br><span class="line">        System.out.println(<span class="string">"子类中的method方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个子类对象</span></span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用子类对象调用show方法</span></span><br><span class="line">        zi.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用子类对象调用method方法</span></span><br><span class="line">        zi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="2-8-继承的特点"><a href="#2-8-继承的特点" class="headerlink" title="2.8 继承的特点"></a>2.8 继承的特点</h2><ol>
<li>Java只支持单继承，不支持多继承。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;<span class="comment">// ok</span></span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> <span class="keyword">extends</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;<span class="comment">// error</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>一个类只能有一个父类,但可以有多个子类。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// A可以有多个子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span> <span class="keyword">extends</span>  <span class="title">A</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>可以多层继承。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">// 爷爷</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;<span class="comment">// 父亲</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;<span class="comment">// 儿子</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>10.3 抽象类</title>
    <url>/2020/06/23/10.3%20%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="第三章-抽象类"><a href="#第三章-抽象类" class="headerlink" title="第三章 抽象类"></a>第三章 抽象类</h1><h2 id="3-1-抽象类的概述和定义"><a href="#3-1-抽象类的概述和定义" class="headerlink" title="3.1 抽象类的概述和定义"></a>3.1 抽象类的概述和定义</h2><h4 id="抽象类的概述"><a href="#抽象类的概述" class="headerlink" title="抽象类的概述"></a>抽象类的概述</h4><ul>
<li>概述: 使用abstract关键字修饰的类就是抽象类</li>
<li>特点: 这种类不能被创建对象,它就是用来做父类的,被子类继承的</li>
</ul>
<h4 id="抽象类的定义"><a href="#抽象类的定义" class="headerlink" title="抽象类的定义"></a>抽象类的定义</h4><ul>
<li><p>格式:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="抽象类中的成员"><a href="#抽象类中的成员" class="headerlink" title="抽象类中的成员"></a>抽象类中的成员</h4><ul>
<li>成员变量</li>
<li>成员方法</li>
<li>构造方法</li>
<li><strong>抽象方法</strong></li>
</ul>
<h2 id="3-2-抽象方法的概述和定义"><a href="#3-2-抽象方法的概述和定义" class="headerlink" title="3.2 抽象方法的概述和定义"></a>3.2 抽象方法的概述和定义</h2><h4 id="抽象方法的概述"><a href="#抽象方法的概述" class="headerlink" title="抽象方法的概述"></a>抽象方法的概述</h4><ul>
<li>没有方法体,使用abstract修饰的方法就是抽象方法</li>
</ul>
<h4 id="抽象方法的定义"><a href="#抽象方法的定义" class="headerlink" title="抽象方法的定义"></a>抽象方法的定义</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名(形参列表);</span><br><span class="line">例如:</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li><p>抽象方法: 没有方法体,使用abstract修饰的方法就是抽象方法</p>
</li>
<li><p>抽象方法定义格式:   修饰符 abstract 返回值类型 方法名(形参列表);</p>
</li>
</ul>
<h2 id="知识点–3-3-抽象类的特点"><a href="#知识点–3-3-抽象类的特点" class="headerlink" title="知识点–3.3  抽象类的特点"></a>知识点–3.3  抽象类的特点</h2><ul>
<li>抽象类不能被创建对象，就是用来做“父类”，被子类继承的。 </li>
<li>抽象类不能被创建对象，但可以有“构造方法”——为成员属性初始化。 </li>
<li>抽象类中可以没有抽象方法,但抽象方法必须定义在抽象类中</li>
<li>子类继承抽象类后,必须重写抽象类中所有的抽象方法,否则子类必须也是一个抽象类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// alt+insert</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生吃快餐..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生喝冰红茶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师吃小炒..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生喝矿泉水"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Doctor</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"医生吃麻辣烫"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       </span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(stu.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4-模板设计模式"><a href="#3-4-模板设计模式" class="headerlink" title="3.4 模板设计模式"></a>3.4 模板设计模式</h2><h4 id="设计模式概述"><a href="#设计模式概述" class="headerlink" title="设计模式概述"></a>设计模式概述</h4><p>​       推荐一本书《HeadFirst设计模式》</p>
<ul>
<li>设计模式就是解决一些问题时的固定思路，也就是代码设计思路经验的总结。</li>
</ul>
<h4 id="模板设计模式概述"><a href="#模板设计模式概述" class="headerlink" title="模板设计模式概述"></a>模板设计模式概述</h4><ul>
<li>针对某些情况,在父类中指定一个模板,然后根据具体情况,在子类中灵活的具体实现该模板</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">// 睡觉,所有子类实现都是一样的  有方法体的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;/</span><br><span class="line">        <span class="comment">// 所有子类通用的实现方式</span></span><br><span class="line">        System.out.println(<span class="string">"两眼一闭,直接睡觉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 吃东西,所有子类是不一样的实现,但是都有吃东西的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>抽象类体现的就是模板思想</strong>，<strong>模板是将通用的东西在抽象类中具体的实现</strong>，而<strong>模板中不能决定的东西定义成抽象方法</strong>，让使用模板（继承抽象类的类）的类去<strong>重写抽象方法实现需求</strong></li>
</ul>
<h4 id="模板模式的实现步骤"><a href="#模板模式的实现步骤" class="headerlink" title="模板模式的实现步骤"></a>模板模式的实现步骤</h4><ul>
<li>定义抽象父类作为模板</li>
<li>在父类中定义”模板方法”— 实现方法(模板)+抽象方法(填充模板)</li>
<li>子类继承父类,重写抽象方法(填充父类的模板)</li>
<li>测试类:<ul>
<li>创建子类对象，通过子类调用父类的“实现的方法”+ “子类重写后的方法” e</li>
</ul>
</li>
</ul>
<h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><p>假如我现在需要定义新司机和老司机类，<strong>新司机和老司机都有开车功能，开车的步骤都一样</strong>，只是驾驶时的姿势有点不同，<code>新司机:开门,点火,双手紧握方向盘,刹车,熄火</code>，<code>老司机:开门,点火,右手握方向盘左手抽烟,刹车,熄火</code>。那么这个时候我们就可以将固定流程写到父类中，不同的地方就定义成抽象方法，让不同的子类去重写</p>
<p>分析:</p>
<ul>
<li>定义司机类作为模板(抽象类)<pre><code>- 开车功能(通用功能,有方法体的方法)
      - 开门
      - 点火
      - 调用开车姿势的方法(新老司机的姿势是不一样的)
      - 刹车
      - 熄火
- 开车姿势的抽象方法(供子类重写)</code></pre></li>
<li>新司机,继承司机类,重写开车姿势的方法</li>
<li>老司机,继承司机类,重写开车姿势的方法</li>
</ul>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 司机开车的模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开门"</span>);</span><br><span class="line">        System.out.println(<span class="string">"点火"</span>);</span><br><span class="line">        <span class="comment">// 开车姿势不确定?定义为抽象方法</span></span><br><span class="line">        ziShi();</span><br><span class="line">        System.out.println(<span class="string">"刹车"</span>);</span><br><span class="line">        System.out.println(<span class="string">"熄火"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在定义两个使用模板的司机：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"新司机双手紧握方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ziShi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老司机右手握方向盘左手抽烟..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NewDriver nd = <span class="keyword">new</span> NewDriver();</span><br><span class="line">        nd.go();</span><br><span class="line"></span><br><span class="line">        OldDriver od = <span class="keyword">new</span> OldDriver();</span><br><span class="line">        od.go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ul>
<li>抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义，<strong>抽象类体现的是模板思想</strong>，<strong>模板是将通用的东西在抽象类中具体的实现</strong>，而<strong>模板中不能决定的东西定义成抽象方法</strong>，让使用模板（继承抽象类的类）的类去<strong>重写抽象方法实现需求</strong>，这是典型的<strong>模板思想</strong>。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>10.4 final</title>
    <url>/2020/06/23/10.4%20final/</url>
    <content><![CDATA[<h1 id="第四章-final关键字"><a href="#第四章-final关键字" class="headerlink" title="第四章 final关键字"></a>第四章 final关键字</h1><h2 id="final关键字的概述和使用"><a href="#final关键字的概述和使用" class="headerlink" title="final关键字的概述和使用"></a>final关键字的概述和使用</h2><p><strong>final</strong>：  不可改变。可以用于修饰类、方法和变量。</p>
<ul>
<li>类：被修饰的类，不能被继承。</li>
<li>方法：被修饰的方法，不能被重写。</li>
<li>变量：被修饰的变量，就只能赋值一次,不能被重新赋值。</li>
</ul>
<h4 id="final关键字的使用"><a href="#final关键字的使用" class="headerlink" title="final关键字的使用"></a>final关键字的使用</h4><h5 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h5><p>格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">例如:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClassFu</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClassZi</span> /*<span class="keyword">extends</span> <span class="title">FinalClassFu</span>*/ </span>&#123;</span><br><span class="line">    <span class="comment">// FinalClassFu类被final修饰了,所以不能被继承</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p>
<h5 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h5><p>格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写被 <code>final</code>修饰的方法，编译时就会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalMethodFu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalMethodZi</span> <span class="keyword">extends</span> <span class="title">FinalMethodFu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public void show() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">// 无法重写父类中的show方法,因为父类中的show方法被final修饰了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修饰变量"><a href="#修饰变量" class="headerlink" title="修饰变量"></a>修饰变量</h5><h6 id="局部变量——基本类型"><a href="#局部变量——基本类型" class="headerlink" title="局部变量——基本类型"></a><strong>局部变量——基本类型</strong></h6><p>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> A;</span><br><span class="line">        <span class="comment">// 第一次赋值 </span></span><br><span class="line">        A = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        A = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="局部变量——引用类型"><a href="#局部变量——引用类型" class="headerlink" title="局部变量——引用类型"></a><strong>局部变量——引用类型</strong></h6><p>引用类型的局部变量，被final修饰后，只能指向一个对象，地址不能再更改。但是不影响对象内部的成员变量值的修改，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 User 对象</span></span><br><span class="line">        <span class="keyword">final</span> User U = <span class="keyword">new</span> User();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建 另一个 User对象</span></span><br><span class="line">        <span class="comment">// U = new User(); // 报错，指向了新的对象，地址值改变。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用setName方法</span></span><br><span class="line">        U.setName(<span class="string">"张三"</span>); <span class="comment">// 可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a><strong>成员变量</strong></h6><p>成员变量涉及到初始化的问题，初始化方式有两种，只能二选一：</p>
<ol>
<li><p>显示初始化；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalVariable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> NUM1 = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造方法初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalVariable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> NUM2;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalVariable</span><span class="params">(<span class="keyword">int</span> NUM2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.NUM2 = NUM2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinalVariable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.NUM2 = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p>
</blockquote>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>final修饰类，类不能被继承。</li>
<li>final修饰方法，方法不能被重写。</li>
<li>final修饰变量，变量不能被改值。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>7.2 对象内存图</title>
    <url>/2020/06/24/7.2%20%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2. 对象内存图"></a>2. 对象内存图</h2><h3 id="2-1-单个对象内存图【理解】"><a href="#2-1-单个对象内存图【理解】" class="headerlink" title="2.1 单个对象内存图【理解】"></a>2.1 单个对象内存图【理解】</h3><p>成员变量使用过程</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.02.png" alt=""></p>
<p>  成员方法调用过程  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.03.png" alt=""></p>
<h3 id="2-2-多个对象内存图【理解】"><a href="#2-2-多个对象内存图【理解】" class="headerlink" title="2.2 多个对象内存图【理解】"></a>2.2 多个对象内存图【理解】</h3><p>成员变量使用过程</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.04.png" alt=""></p>
<p>  成员方法调用过程  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.05.png" alt=""></p>
<p>总结：<br>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的<br>一份</p>
<h3 id="2-3-多个对象指向相同内存图【理解】"><a href="#2-3-多个对象指向相同内存图【理解】" class="headerlink" title="2.3 多个对象指向相同内存图【理解】"></a>2.3 多个对象指向相同内存图【理解】</h3><p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C7.06.png" alt=""></p>
<p>总结<br>当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）<br>只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。  </p>
]]></content>
  </entry>
  <entry>
    <title>7.1 类和对象</title>
    <url>/2020/06/24/7.1%20%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><h3 id="1-1-类和对象的理解【理解】"><a href="#1-1-类和对象的理解【理解】" class="headerlink" title="1.1 类和对象的理解【理解】"></a>1.1 类和对象的理解【理解】</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。<br>类<br>类的理解<br>类是对现实生活中一类具有共同属性和行为的事物的抽象<br>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合<br>简单理解：类就是对现实事物的一种描述<br>类的组成<br>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）<br>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）<br>类和对象的关系<br>类：类是对现实生活中一类具有共同属性和行为的事物的抽象<br>对象：是能够看得到摸的着的真实存在的实体<br>简单理解：类是对事物的一种描述，对象则为具体存在的事物</p>
<h3 id="1-2-类的定义【应用】"><a href="#1-2-类的定义【应用】" class="headerlink" title="1.2 类的定义【应用】"></a>1.2 类的定义【应用】</h3><p>类的组成是由属性和行为两部分组成<br>属性：在类中通过成员变量来体现（类中方法外的变量）<br>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）<br>类的定义步骤：<br>①定义类<br>②编写类的成员变量<br>③编写类的成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>；</span><br><span class="line">    变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">    … /</span><br><span class="line">    / 成员方法</span><br><span class="line">    方法<span class="number">1</span>;</span><br><span class="line">    方法<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">*</span><br><span class="line">    手机类：</span><br><span class="line">    类名：</span><br><span class="line">    手机(Phone)</span><br><span class="line">    成员变量：</span><br><span class="line">    品牌(brand)</span><br><span class="line">    价格(price)</span><br><span class="line">    成员方法：</span><br><span class="line">    打电话(call)</span><br><span class="line">    发短信(sendMessage)</span><br><span class="line">    */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发短信"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-3-对象的使用【应用】"><a href="#1-3-对象的使用【应用】" class="headerlink" title="1.3 对象的使用【应用】"></a>1.3 对象的使用【应用】</h3><p>创建对象的格式：<br>类名 对象名 = new 类名();<br>调用成员的格式：<br>对象名.成员变量<br>对象名.成员方法();<br>示例代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象</span></span><br><span class="line"><span class="comment">        格式：类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">        范例：Phone p = new Phone();</span></span><br><span class="line"><span class="comment">    使用对象</span></span><br><span class="line"><span class="comment">        1：使用成员变量</span></span><br><span class="line"><span class="comment">            格式：对象名.变量名</span></span><br><span class="line"><span class="comment">            范例：p.brand</span></span><br><span class="line"><span class="comment">        2：使用成员方法</span></span><br><span class="line"><span class="comment">            格式：对象名.方法名()</span></span><br><span class="line"><span class="comment">            范例：p.call()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员变量</span></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.brand = <span class="string">"小米"</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员方法</span></span><br><span class="line">        p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-4-学生对象-练习【应用】"><a href="#1-4-学生对象-练习【应用】" class="headerlink" title="1.4 学生对象-练习【应用】"></a>1.4 学生对象-练习【应用】</h3><p>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法<br>的使用<br>分析：<br>成员变量：姓名，年龄…<br>成员方法：学习，做作业…<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"好好学习，天天向上"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHomework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"键盘敲烂，月薪过万"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">学生测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name + <span class="string">","</span> + s.age);</span><br><span class="line">        </span><br><span class="line">        s.name = <span class="string">"林青霞"</span>;</span><br><span class="line">        s.age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s.name + <span class="string">","</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>7.3 成员变量和局部变量</title>
    <url>/2020/06/24/7.3%20%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-成员变量和局部变量的区别【理解】"><a href="#3-1-成员变量和局部变量的区别【理解】" class="headerlink" title="3.1 成员变量和局部变量的区别【理解】"></a>3.1 成员变量和局部变量的区别【理解】</h3><p>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</p>
<p>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</p>
<p>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</p>
<p>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</p>
]]></content>
  </entry>
  <entry>
    <title>8.1 API</title>
    <url>/2020/06/24/8.1%20API/</url>
    <content><![CDATA[<h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1API概述【理解】"><a href="#1-1API概述【理解】" class="headerlink" title="1.1API概述【理解】"></a>1.1API概述【理解】</h3><p>什么是API<br>API (Application Programming Interface) ：应用程序编程接口</p>
<p>java中的API<br>指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何<br>实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>
<h3 id="1-2如何使用API帮助文档【应用】"><a href="#1-2如何使用API帮助文档【应用】" class="headerlink" title="1.2如何使用API帮助文档【应用】"></a>1.2如何使用API帮助文档【应用】</h3><p>打开帮助文档</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.1.png" alt=""></p>
<p>  找到索引选项卡中的输入框  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.11.png" alt=""></p>
<p>  在输入框中输入Random  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.12.png" alt=""></p>
<p>  看类在哪个包下  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.13.png" alt=""></p>
<p>  看类的描述  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.14.png" alt=""></p>
<p>  看构造方法  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.15.png" alt=""></p>
<p>  看成员方法  </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cpictures%5C8.16.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>8.3 StringBuilder</title>
    <url>/2020/06/25/8.3%20StringBuilder/</url>
    <content><![CDATA[<h2 id="3-StringBuilder类"><a href="#3-StringBuilder类" class="headerlink" title="3.StringBuilder类"></a>3.StringBuilder类</h2><h3 id="3-1StringBuilder类概述【理解】"><a href="#3-1StringBuilder类概述【理解】" class="headerlink" title="3.1StringBuilder类概述【理解】"></a>3.1StringBuilder类概述【理解】</h3><p>StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的<br>内容是可变的</p>
<h3 id="3-2StringBuilder类和String类的区别【理解】"><a href="#3-2StringBuilder类和String类的区别【理解】" class="headerlink" title="3.2StringBuilder类和String类的区别【理解】"></a>3.2StringBuilder类和String类的区别【理解】</h3><p>String类：内容是不可变的<br>StringBuilder类：内容是可变的</p>
<h3 id="3-3StringBuilder类的构造方法【记忆】"><a href="#3-3StringBuilder类的构造方法【记忆】" class="headerlink" title="3.3StringBuilder类的构造方法【记忆】"></a>3.3StringBuilder类的构造方法【记忆】</h3><p>方法名 说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">()</span>              创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StringBuilder</span><span class="params">(String str)</span>    根据字符串的内容，来创建可变字符串对象</span></span><br></pre></td></tr></table></figure>

<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder()：创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line">        System.out.println(<span class="string">"sb.length():"</span> + sb.length());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//public StringBuilder(String str)：根据字符串的内容，来创建可变字符串对象</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sb2:"</span> + sb2);</span><br><span class="line">        System.out.println(<span class="string">"sb2.length():"</span> + sb2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4StringBuilder类添加和反转方法【记忆】"><a href="#3-4StringBuilder类添加和反转方法【记忆】" class="headerlink" title="3.4StringBuilder类添加和反转方法【记忆】"></a>3.4StringBuilder类添加和反转方法【记忆】</h3><p>添加和反转方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法名                                        说明</span><br><span class="line">public StringBuilder append(任意类型)         添加数据，并返回对象本身</span><br><span class="line">public StringBuilder reverse()               返回相反的字符序列</span><br></pre></td></tr></table></figure>



<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder append(任意类型)：添加数据，并返回对象本身</span></span><br><span class="line"><span class="comment">//        StringBuilder sb2 = sb.append("hello");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println("sb:" + sb);</span></span><br><span class="line"><span class="comment">//        System.out.println("sb2:" + sb2);</span></span><br><span class="line"><span class="comment">//        System.out.println(sb == sb2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        sb.append("hello");</span></span><br><span class="line"><span class="comment">//        sb.append("world");</span></span><br><span class="line"><span class="comment">//        sb.append("java");</span></span><br><span class="line"><span class="comment">//        sb.append(100);</span></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        sb.append(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"java"</span>).append(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder reverse()：返回相反的字符序列</span></span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(<span class="string">"sb:"</span> + sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5StringBuilder和String相互转换【应用】"><a href="#3-5StringBuilder和String相互转换【应用】" class="headerlink" title="3.5StringBuilder和String相互转换【应用】"></a>3.5StringBuilder和String相互转换【应用】</h3><p>StringBuilder转换为String<br>public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String<br>String转换为StringBuilder<br>public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //StringBuilder 转换为 String</span></span><br><span class="line"><span class="comment">        StringBuilder sb = new StringBuilder();</span></span><br><span class="line"><span class="comment">        sb.append("hello");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //String s = sb; //这个是错误的做法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为</span></span><br><span class="line"><span class="comment">        String</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        String s = sb.toString();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String 转换为 StringBuilder</span></span><br><span class="line">        String s = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StringBuilder sb = s; //这个是错误的做法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为StringBuilder</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-6字符串拼接升级版案例【应用】"><a href="#3-6字符串拼接升级版案例【应用】" class="headerlink" title="3.6字符串拼接升级版案例【应用】"></a>3.6字符串拼接升级版案例【应用】</h3><h4 id="3-6-1案例需求"><a href="#3-6-1案例需求" class="headerlink" title="3.6.1案例需求"></a>3.6.1案例需求</h4><p>定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，<br>并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p>
<h4 id="3-6-2代码实现"><a href="#3-6-2代码实现" class="headerlink" title="3.6.2代码实现"></a>3.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">*</span><br><span class="line">思路：</span><br><span class="line">    <span class="number">1</span>:定义一个 <span class="keyword">int</span> 类型的数组，用静态初始化完成数组元素的初始化</span><br><span class="line">    <span class="number">2</span>:定义一个方法，用于把 <span class="keyword">int</span> 数组中的数据按照指定格式拼接成一个字符串返回。</span><br><span class="line">        返回值类型 String，参数列表 <span class="keyword">int</span>[] arr</span><br><span class="line">    <span class="number">3</span>:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</span><br><span class="line">    <span class="number">4</span>:调用方法，用一个变量接收结果</span><br><span class="line">    <span class="number">5</span>:输出结果</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    两个明确：</span></span><br><span class="line"><span class="comment">    返回值类型：String</span></span><br><span class="line"><span class="comment">    参数：int[] arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">"["</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        sb.append(<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">        String s = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-7字符串反转升级版案例【应用】"><a href="#3-7字符串反转升级版案例【应用】" class="headerlink" title="3.7字符串反转升级版案例【应用】"></a>3.7字符串反转升级版案例【应用】</h3><h4 id="3-7-1案例需求"><a href="#3-7-1案例需求" class="headerlink" title="3.7.1案例需求"></a>3.7.1案例需求</h4><p>定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果<br>例如，键盘录入abc，输出结果 cba</p>
<h4 id="3-7-2代码实现"><a href="#3-7-2代码实现" class="headerlink" title="3.7.2代码实现"></a>3.7.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">*</span><br><span class="line">思路：</span><br><span class="line">    <span class="number">1</span>:键盘录入一个字符串，用 Scanner 实现</span><br><span class="line">    <span class="number">2</span>:定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span><br><span class="line">    <span class="number">3</span>:在方法中用StringBuilder实现字符串的反转，并把结果转成String返回</span><br><span class="line">    <span class="number">4</span>:调用方法，用一个变量接收结果</span><br><span class="line">    <span class="number">5</span>:输出结果</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = myReverse(line);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">        返回值类型：String</span></span><br><span class="line"><span class="comment">        参数：String s</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">myReverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//在方法中用StringBuilder实现字符串的反转，并把结果转成String返回</span></span><br><span class="line">            <span class="comment">//String --- StringBuilder --- reverse() --- String</span></span><br><span class="line"><span class="comment">//            StringBuilder sb = new StringBuilder(s);</span></span><br><span class="line"><span class="comment">//            sb.reverse();</span></span><br><span class="line"><span class="comment">//            String ss = sb.toString();</span></span><br><span class="line"><span class="comment">//            return ss;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(s).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-8帮助文档查看StringBuilder常用方法【记忆】"><a href="#3-8帮助文档查看StringBuilder常用方法【记忆】" class="headerlink" title="3.8帮助文档查看StringBuilder常用方法【记忆】"></a>3.8帮助文档查看StringBuilder常用方法【记忆】</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法名 									说明</span><br><span class="line">public StringBuilder append (任意类型) 		添加数据，并返回对象本身</span><br><span class="line">public StringBuilder reverse() 			  返回相反的字符序列</span><br><span class="line">public int length()                       返回长度，实际存储值</span><br><span class="line">public String toString()                  通过toString()就可以实现把												   StringBuilder转换为String</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>8.2 String类</title>
    <url>/2020/06/25/8.2%20String%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2.String类"></a>2.String类</h2><h3 id="2-1String类概述【理解】"><a href="#2-1String类概述【理解】" class="headerlink" title="2.1String类概述【理解】"></a>2.1String类概述【理解】</h3><p>String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序<br>中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</p>
<h3 id="2-2String类的特点【理解】"><a href="#2-2String类的特点【理解】" class="headerlink" title="2.2String类的特点【理解】"></a>2.2String类的特点【理解】</h3><p>字符串不可变，它们的值在创建后不能被更改<br>虽然 String 的值是不可变的，但是它们可以被共享<br>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</p>
<h3 id="2-3String类的构造方法【记忆】"><a href="#2-3String类的构造方法【记忆】" class="headerlink" title="2.3String类的构造方法【记忆】"></a>2.3String类的构造方法【记忆】</h3><p>常用的构造方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法名                              说明</span><br><span class="line">public String()                 创建一个空白字符串对象，不含有任何内容</span><br><span class="line">public String(char[] chs)       根据字符数组的内容，来创建字符串对象</span><br><span class="line">public String(byte[] bys)       根据字节数组的内容，来创建字符串对象</span><br><span class="line">String s &#x3D; “abc”;               直接赋值的方式创建字符串对象，内容就是abc</span><br></pre></td></tr></table></figure>

<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String()：创建一个空白字符串对象，不含有任何内容</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(<span class="string">"s1:"</span> + s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(char[] chs)：根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        System.out.println(<span class="string">"s2:"</span> + s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(bys);</span><br><span class="line">        System.out.println(<span class="string">"s3:"</span> + s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = “abc”; 直接赋值的方式创建字符串对象，内容就是abc</span></span><br><span class="line">        String s4 = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(<span class="string">"s4:"</span> + s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4创建字符串对象两种方式的区别【理解】"><a href="#2-4创建字符串对象两种方式的区别【理解】" class="headerlink" title="2.4创建字符串对象两种方式的区别【理解】"></a>2.4创建字符串对象两种方式的区别【理解】</h3><p>通过构造方法创建<br>通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同<br>直接赋值方式创建<br>以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一<br>个 String 对象，并在字符串池中维护</p>
<h3 id="2-5字符串的比较【理解】"><a href="#2-5字符串的比较【理解】" class="headerlink" title="2.5字符串的比较【理解】"></a>2.5字符串的比较【理解】</h3><h4 id="2-5-1-号的作用"><a href="#2-5-1-号的作用" class="headerlink" title="2.5.1==号的作用"></a>2.5.1==号的作用</h4><p>比较基本数据类型：比较的是具体的值<br>比较引用数据类型：比较的是对象地址值</p>
<h4 id="2-5-2equals方法的作用"><a href="#2-5-2equals方法的作用" class="headerlink" title="2.5.2equals方法的作用"></a>2.5.2equals方法的作用</h4><p>方法介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String s)</span> 比较两个字符串内容是否相同、区分大小写</span></span><br></pre></td></tr></table></figure>

<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>&#125;;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">        String s3 = <span class="string">"abc"</span>;</span><br><span class="line">        String s4 = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">        System.out.println(<span class="string">"--------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equals(s3));</span><br><span class="line">        System.out.println(s3.equals(s4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6用户登录案例【应用】"><a href="#2-6用户登录案例【应用】" class="headerlink" title="2.6用户登录案例【应用】"></a>2.6用户登录案例【应用】</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p>
<h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1:已知用户名和密码，定义两个字符串表示即可</span></span><br><span class="line"><span class="comment">2:键盘录入要登录的用户名和密码，用 Scanner 实现</span></span><br><span class="line"><span class="comment">3:拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用</span></span><br><span class="line"><span class="comment">equals() 方法实现</span></span><br><span class="line"><span class="comment">4:用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//已知用户名和密码，定义两个字符串表示即可</span></span><br><span class="line">        String username = <span class="string">"itheima"</span>;</span><br><span class="line">        String password = <span class="string">"czbk"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//键盘录入要登录的用户名和密码，用 Scanner 实现</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"请输入用户名："</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"请输入密码："</span>);</span><br><span class="line">            String pwd = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，</span></span><br><span class="line">            用equals() 方法实现</span><br><span class="line">            <span class="keyword">if</span> (name.equals(username) &amp;&amp; pwd.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>-i == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"你的账户被锁定，请与管理员联系"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//2,1,0</span></span><br><span class="line">                    <span class="comment">//i,0,1,2</span></span><br><span class="line">                    System.out.println(<span class="string">"登录失败，你还有"</span> + (<span class="number">2</span> - i) + <span class="string">"次机会"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7遍历字符串案例【应用】"><a href="#2-7遍历字符串案例【应用】" class="headerlink" title="2.7遍历字符串案例【应用】"></a>2.7遍历字符串案例【应用】</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p>
<h4 id="2-7-2代码实现"><a href="#2-7-2代码实现" class="headerlink" title="2.7.2代码实现"></a>2.7.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">    2:遍历字符串，首先要能够获取到字符串中的每一个字符</span></span><br><span class="line"><span class="comment">        public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的</span></span><br><span class="line"><span class="comment">    3:遍历字符串，其次要能够获取到字符串的长度</span></span><br><span class="line"><span class="comment">        public int length()：返回此字符串的长度</span></span><br><span class="line"><span class="comment">        数组的长度：数组名.length</span></span><br><span class="line"><span class="comment">        字符串的长度：字符串对象.length()</span></span><br><span class="line"><span class="comment">    4:遍历字符串的通用格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">            System.out.println(line.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8统计字符次数案例【应用】"><a href="#2-8统计字符次数案例【应用】" class="headerlink" title="2.8统计字符次数案例【应用】"></a>2.8统计字符次数案例【应用】</h3><h4 id="2-8-1案例需求"><a href="#2-8-1案例需求" class="headerlink" title="2.8.1案例需求"></a>2.8.1案例需求</h4><p>键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p>
<h4 id="2-8-2代码实现"><a href="#2-8-2代码实现" class="headerlink" title="2.8.2代码实现"></a>2.8.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">    2:要统计三种类型的字符个数，需定义三个统计变量，初始值都为0</span></span><br><span class="line"><span class="comment">    3:遍历字符串，得到每一个字符</span></span><br><span class="line"><span class="comment">    4:判断该字符属于哪种类型，然后对应类型的统计变量+1</span></span><br><span class="line"><span class="comment">        假如ch是一个字符，我要判断它属于大写字母，小写字母，还是数字，直接判断该字符是否在对应的范</span></span><br><span class="line"><span class="comment">        围即可</span></span><br><span class="line"><span class="comment">        大写字母：ch&gt;='A' &amp;&amp; ch&lt;='Z'</span></span><br><span class="line"><span class="comment">        小写字母： ch&gt;='a' &amp;&amp; ch&lt;='z'</span></span><br><span class="line"><span class="comment">        数字： ch&gt;='0' &amp;&amp; ch&lt;='9'</span></span><br><span class="line"><span class="comment">    5:输出三种类型的字符个数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要统计三种类型的字符个数，需定义三个统计变量，初始值都为0</span></span><br><span class="line">        <span class="keyword">int</span> bigCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> smallCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numberCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span> ch = line.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断该字符属于哪种类型，然后对应类型的统计变量+1</span></span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">'A'</span> &amp;&amp; ch&lt;=<span class="string">'Z'</span>) &#123;</span><br><span class="line">            bigCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">'a'</span> &amp;&amp; ch&lt;=<span class="string">'z'</span>) &#123;</span><br><span class="line">            smallCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">'0'</span> &amp;&amp; ch&lt;=<span class="string">'9'</span>) &#123;</span><br><span class="line">            numberCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//输出三种类型的字符个数</span></span><br><span class="line">        System.out.println(<span class="string">"大写字母："</span> + bigCount + <span class="string">"个"</span>);</span><br><span class="line">        System.out.println(<span class="string">"小写字母："</span> + smallCount + <span class="string">"个"</span>);</span><br><span class="line">        System.out.println(<span class="string">"数字："</span> + numberCount + <span class="string">"个"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-9字符串拼接案例【应用】"><a href="#2-9字符串拼接案例【应用】" class="headerlink" title="2.9字符串拼接案例【应用】"></a>2.9字符串拼接案例【应用】</h3><h4 id="2-9-1案例需求"><a href="#2-9-1案例需求" class="headerlink" title="2.9.1案例需求"></a>2.9.1案例需求</h4><p>定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，<br>并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p>
<h4 id="2-9-2代码实现"><a href="#2-9-2代码实现" class="headerlink" title="2.9.2代码实现"></a>2.9.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">    2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。</span></span><br><span class="line"><span class="comment">        返回值类型 String，参数列表 int[] arr</span></span><br><span class="line"><span class="comment">    3:在方法中遍历数组，按照要求进行拼接</span></span><br><span class="line"><span class="comment">    4:调用方法，用一个变量接收结果</span></span><br><span class="line"><span class="comment">    5:输出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    两个明确：</span></span><br><span class="line"><span class="comment">    返回值类型：String</span></span><br><span class="line"><span class="comment">    参数：int[] arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在方法中遍历数组，按照要求进行拼接</span></span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        s += <span class="string">"["</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">                s += <span class="string">", "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    s+= <span class="string">"]"</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-10字符串反转案例【应用】"><a href="#2-10字符串反转案例【应用】" class="headerlink" title="2.10字符串反转案例【应用】"></a>2.10字符串反转案例【应用】</h3><h4 id="2-10-1案例需求"><a href="#2-10-1案例需求" class="headerlink" title="2.10.1案例需求"></a>2.10.1案例需求</h4><p>定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果<br>例如，键盘录入 abc，输出结果 cba</p>
<h4 id="2-10-2代码实现"><a href="#2-10-2代码实现" class="headerlink" title="2.10.2代码实现"></a>2.10.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">*</span><br><span class="line">思路：</span><br><span class="line">    <span class="number">1</span>:键盘录入一个字符串，用 Scanner 实现</span><br><span class="line">    <span class="number">2</span>:定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span><br><span class="line">    <span class="number">3</span>:在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回</span><br><span class="line">    <span class="number">4</span>:调用方法，用一个变量接收结果</span><br><span class="line">    <span class="number">5</span>:输出结果</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串："</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = reverse(line);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"s:"</span> + s);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//定义一个方法，实现字符串反转</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    两个明确：</span></span><br><span class="line"><span class="comment">    返回值类型：String</span></span><br><span class="line"><span class="comment">    参数：String s</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回</span></span><br><span class="line">        String ss = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            ss += s.charAt(i);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> ss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-11帮助文档查看String常用方法【记忆】"><a href="#2-11帮助文档查看String常用方法【记忆】" class="headerlink" title="2.11帮助文档查看String常用方法【记忆】"></a>2.11帮助文档查看String常用方法【记忆】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名                                      说明</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span>     比较字符串的内容，严格区分大小写<span class="params">(用户名											  和密码)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>              返回指定索引处的 <span class="keyword">char</span> 值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span>                        返回此字符串的长度</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>9.1 ArrayList</title>
    <url>/2020/06/25/9.1%20ArrayList/</url>
    <content><![CDATA[<h2 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h2><h3 id="1-1ArrayList类概述【理解】"><a href="#1-1ArrayList类概述【理解】" class="headerlink" title="1.1ArrayList类概述【理解】"></a>1.1ArrayList类概述【理解】</h3><p>什么是集合<br>    提供一种存储空间可变的存储模型，存储的数据容量可以发生改变<br>ArrayList集合的特点<br>    底层是数组实现的，长度可以变化<br>泛型的使用<br>    用于约束集合中存储元素的数据类型</p>
<h3 id="1-2ArrayList类常用方法【应用】"><a href="#1-2ArrayList类常用方法【应用】" class="headerlink" title="1.2ArrayList类常用方法【应用】"></a>1.2ArrayList类常用方法【应用】</h3><h4 id="1-2-1构造方法"><a href="#1-2-1构造方法" class="headerlink" title="1.2.1构造方法"></a>1.2.1构造方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名                  说明</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span>      创建一个空的集合对象</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-2成员方法"><a href="#1-2-2成员方法" class="headerlink" title="1.2.2成员方法"></a>1.2.2成员方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名                                       说明</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span>             删除指定的元素，返回删除是否成功</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span>                  删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E element)</span>           修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span>                     返回指定索引处的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                           返回集合中的元素的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span>                     将指定的元素追加到此集合的末尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E element)</span>        在此集合中的指定位置插入指定的元素</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3示例代码"><a href="#1-2-3示例代码" class="headerlink" title="1.2.3示例代码"></a>1.2.3示例代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ArrayListDemo02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;创建集合</span><br><span class="line">        ArrayList&lt;String&gt; array &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;添加元素</span><br><span class="line">        array.add(&quot;hello&quot;);</span><br><span class="line">        array.add(&quot;world&quot;);</span><br><span class="line">        array.add(&quot;java&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.remove(&quot;world&quot;));</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.remove(&quot;javaee&quot;));</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.remove(1));</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;IndexOutOfBoundsException</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.remove(3));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.set(1,&quot;javaee&quot;));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;IndexOutOfBoundsException</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.set(3,&quot;javaee&quot;));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public E get(int index)：返回指定索引处的元素</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.get(0));</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.get(1));</span><br><span class="line">&#x2F;&#x2F;        System.out.println(array.get(2));</span><br><span class="line">        &#x2F;&#x2F;System.out.println(array.get(3)); &#x2F;&#x2F;？？？？？？ 自己测试</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;public int size()：返回集合中的元素的个数</span><br><span class="line">        System.out.println(array.size());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;输出集合</span><br><span class="line">        System.out.println(&quot;array:&quot; + array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3ArrayList存储字符串并遍历【应用】"><a href="#1-3ArrayList存储字符串并遍历【应用】" class="headerlink" title="1.3ArrayList存储字符串并遍历【应用】"></a>1.3ArrayList存储字符串并遍历【应用】</h3><h4 id="1-3-1案例需求"><a href="#1-3-1案例需求" class="headerlink" title="1.3.1案例需求"></a>1.3.1案例需求</h4><p>创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p>
<h4 id="1-3-2代码实现"><a href="#1-3-2代码实现" class="headerlink" title="1.3.2代码实现"></a>1.3.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">*</span><br><span class="line">思路：</span><br><span class="line">    <span class="number">1</span>:创建集合对象</span><br><span class="line">    <span class="number">2</span>:往集合中添加字符串对象</span><br><span class="line">    <span class="number">3</span>:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(<span class="keyword">int</span> index)方法实现</span><br><span class="line">    <span class="number">4</span>:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span><br><span class="line">    <span class="number">5</span>:遍历集合的通用格式</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加字符串对象</span></span><br><span class="line">        array.add(<span class="string">"刘正风"</span>);</span><br><span class="line">        array.add(<span class="string">"左冷禅"</span>);</span><br><span class="line">        array.add(<span class="string">"风清扬"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span></span><br><span class="line"><span class="comment">//        System.out.println(array.size());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合的通用格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            String s = array.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4ArrayList存储学生对象并遍历【应用】"><a href="#1-4ArrayList存储学生对象并遍历【应用】" class="headerlink" title="1.4ArrayList存储学生对象并遍历【应用】"></a>1.4ArrayList存储学生对象并遍历【应用】</h3><h4 id="1-4-1案例需求"><a href="#1-4-1案例需求" class="headerlink" title="1.4.1案例需求"></a>1.4.1案例需求</h4><p>创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
<h4 id="1-4-2代码实现"><a href="#1-4-2代码实现" class="headerlink" title="1.4.2代码实现"></a>1.4.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1:定义学生类</span></span><br><span class="line"><span class="comment">    2:创建集合对象</span></span><br><span class="line"><span class="comment">    3:创建学生对象</span></span><br><span class="line"><span class="comment">    4:添加学生对象到集合中</span></span><br><span class="line"><span class="comment">    5:遍历集合，采用通用遍历格式实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"风清扬"</span>, <span class="number">33</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"张曼玉"</span>, <span class="number">18</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加学生对象到集合中</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，采用通用遍历格式实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5ArrayList存储学生对象并遍历升级版【应用】"><a href="#1-5ArrayList存储学生对象并遍历升级版【应用】" class="headerlink" title="1.5ArrayList存储学生对象并遍历升级版【应用】"></a>1.5ArrayList存储学生对象并遍历升级版【应用】</h3><h4 id="1-5-1案例需求"><a href="#1-5-1案例需求" class="headerlink" title="1.5.1案例需求"></a>1.5.1案例需求</h4><p>创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合<br>学生的姓名和年龄来自于键盘录入</p>
<h4 id="1-5-2代码实现"><a href="#1-5-2代码实现" class="headerlink" title="1.5.2代码实现"></a>1.5.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">*</span><br><span class="line">思路：</span><br><span class="line">    <span class="number">1</span>:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型</span><br><span class="line">    <span class="number">2</span>:创建集合对象</span><br><span class="line">    <span class="number">3</span>:键盘录入学生对象所需要的数据</span><br><span class="line">    <span class="number">4</span>:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span><br><span class="line">    <span class="number">5</span>:往集合中添加学生对象</span><br><span class="line">    <span class="number">6</span>:遍历集合，采用通用遍历格式实现</span><br><span class="line">*/</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了提高代码的复用性，我们用方法来改进程序</span></span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，采用通用遍历格式实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    两个明确：</span></span><br><span class="line"><span class="comment">    返回值类型：void</span></span><br><span class="line"><span class="comment">    参数：ArrayList&lt;Student&gt; array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入学生对象所需要的数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入学生姓名:"</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入学生年龄:"</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加学生对象</span></span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>9.2 学生管理系统</title>
    <url>/2020/06/25/9.2%20%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="2-学生管理系统"><a href="#2-学生管理系统" class="headerlink" title="2.学生管理系统"></a>2.学生管理系统</h2><h3 id="2-1学生管理系统实现步骤【理解】"><a href="#2-1学生管理系统实现步骤【理解】" class="headerlink" title="2.1学生管理系统实现步骤【理解】"></a>2.1学生管理系统实现步骤【理解】</h3><p>案例需求<br>针对目前我们的所学内容，完成一个综合案例：学生管理系统！该系统主要功能如下：<br>添加学生：通过键盘录入学生信息，添加到集合中<br>删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除<br>修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改<br>查看学生：将集合中的学生对象信息进行展示<br>退出系统：结束程序<br>实现步骤</p>
<ol>
<li>定义学生类，包含以下成员变量<br> private String sid // 学生id<br> private String name // 学生姓名<br> private String age // 学生年龄<br> private String address // 学生所在地</li>
<li>学生管理系统主界面的搭建步骤<br> 2.1 用输出语句完成主界面的编写<br> 2.2 用Scanner实现键盘输入<br> 2.3 用switch语句完成选择的功能<br> 2.4 用循环完成功能结束后再次回到主界面</li>
<li>学生管理系统的添加学生功能实现步骤<br> 3.1 定义一个方法，接收ArrayList集合<br> 3.2 方法内完成添加学生的功能 <pre><code>①键盘录入学生信息 
②根据录入的信息创建学生对象 
③将学生对象添加到集合中 
④提示添加成功信息 </code></pre> 3.3 在添加学生的选项里调用添加学生的方法</li>
<li>学生管理系统的查看学生功能实现步骤<br> 4.1 定义一个方法，接收ArrayList集合<br> 4.2 方法内遍历集合，将学生信息进行输出<br> 4.3 在查看所有学生选项里调用查看学生方法</li>
<li>学生管理系统的删除学生功能实现步骤<br> 5.1 定义一个方法，接收ArrayList集合<br> 5.2 方法中接收要删除学生的学号<br> 5.3 遍历集合，获取每个学生对象<br> 5.4 使用学生对象的学号和录入的要删除的学号进行比较,如果相同，则将当前学生对象从集合中删除<br> 5.5 在删除学生选项里调用删除学生的方法</li>
<li>学生管理系统的修改学生功能实现步骤<br> 6.1 定义一个方法，接收ArrayList集合<br> 6.2 方法中接收要修改学生的学号<br> 6.3 通过键盘录入学生对象所需的信息，并创建对象<br> 6.4 遍历集合，获取每一个学生对象。并和录入的修改学生学号进行比较.如果相同，则使用新学生对象替换当前学生对象<br> 6.5 在修改学生选项里调用修改学生的方法</li>
<li>退出系统<br> 使用System.exit(0);退出JVM</li>
</ol>
<h3 id="2-2学生类的定义【应用】"><a href="#2-2学生类的定义【应用】" class="headerlink" title="2.2学生类的定义【应用】"></a>2.2学生类的定义【应用】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> String sid;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="comment">//居住地</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sid, String name, String age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(String sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3测试类的定义【应用】"><a href="#2-3测试类的定义【应用】" class="headerlink" title="2.3测试类的定义【应用】"></a>2.3测试类的定义【应用】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1:用输出语句完成主界面的编写</span></span><br><span class="line"><span class="comment">        2:用Scanner实现键盘录入数据</span></span><br><span class="line"><span class="comment">        3:用switch语句完成操作的选择</span></span><br><span class="line"><span class="comment">        4:用循环完成再次回到主界面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建集合对象，用于保存学生数据信息</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用循环完成再次回到主界面</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用输出语句完成主界面的编写</span></span><br><span class="line">            System.out.println(<span class="string">"--------欢迎来到学生管理系统--------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"1 添加学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"2 删除学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"3 修改学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"4 查看所有学生"</span>);</span><br><span class="line">            System.out.println(<span class="string">"5 退出"</span>);</span><br><span class="line">            System.out.println(<span class="string">"请输入你的选择："</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用Scanner实现键盘录入数据</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用switch语句完成操作的选择</span></span><br><span class="line">            <span class="keyword">switch</span> (line) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                    addStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                    deleteStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">                    updateStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"4"</span>:</span><br><span class="line">                    findAllStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">                    System.out.println(<span class="string">"谢谢使用"</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>); <span class="comment">//JVM退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//定义一个方法，用于添加学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘录入学生对象所需要的数据,显示提示信息，提示要输入何种信息</span></span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    String sid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入学生学号："</span>);</span><br><span class="line">        sid = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> flag = isUsed(array, sid);</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你输入的学号已经被占用，请重新输入"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(<span class="string">"请输入学生姓名："</span>);</span><br><span class="line">    String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"请输入学生年龄："</span>);</span><br><span class="line">    String age = sc.nextLine();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"请输入学生居住地："</span>);</span><br><span class="line">    String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student();</span><br><span class="line">    s.setSid(sid);</span><br><span class="line">    s.setName(name);</span><br><span class="line">    s.setAge(age);</span><br><span class="line">    s.setAddress(address);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将学生对象添加到集合中</span></span><br><span class="line">    array.add(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给出添加成功提示</span></span><br><span class="line">    System.out.println(<span class="string">"添加学生成功"</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，判断学号是否被使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUsed</span><span class="params">(ArrayList&lt;Student&gt; array, String sid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果与集合中的某一个学生学号相同，返回true;如果都不相同，返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span>(s.getSid().equals(sid)) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于查看学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findAllStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断集合中是否有数据，如果没有显示提示信息</span></span><br><span class="line">    <span class="keyword">if</span> (array.size() == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"无信息，请先添加信息再查询"</span>);</span><br><span class="line">        <span class="comment">//为了让程序不再往下执行，我们在这里写上return;</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//显示表头信息</span></span><br><span class="line">    <span class="comment">//\t其实是一个tab键的位置</span></span><br><span class="line">    System.out.println(<span class="string">"学号\t\t\t姓名\t\t年龄\t\t居住地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁”</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getSid() + <span class="string">"\t"</span> + s.getName() + <span class="string">"\t"</span> + s.getAge() +</span><br><span class="line">            <span class="string">"岁\t\t"</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//定义一个方法，用于删除学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要删除的学生学号,显示提示信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入你要删除的学生的学号："</span>);</span><br><span class="line">        String sid = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在删除/修改学生操作前，对学号是否存在进行判断</span></span><br><span class="line">        <span class="comment">//如果不存在，显示提示信息</span></span><br><span class="line">        <span class="comment">//如果存在，执行删除/修改操作</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getSid().equals(sid)) &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"该信息不存在，请重新输入"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            array.remove(index);</span><br><span class="line">            <span class="comment">//给出删除成功提示</span></span><br><span class="line">            System.out.println(<span class="string">"删除学生成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//定义一个方法，用于修改学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要修改的学生学号，显示提示信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"请输入你要修改的学生的学号："</span>);</span><br><span class="line">        String sid = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要修改的学生信息</span></span><br><span class="line">        System.out.println(<span class="string">"请输入学生新姓名："</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生新年龄："</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入学生新居住地："</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setSid(sid);</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line">        s.setAddress(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合修改对应的学生信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student student = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (student.getSid().equals(sid)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//给出修改成功提示</span></span><br><span class="line">        System.out.println(<span class="string">"修改学生成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>7.5 构造方法</title>
    <url>/2020/06/24/7.5%20%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法概述【理解】"><a href="#5-1-构造方法概述【理解】" class="headerlink" title="5.1 构造方法概述【理解】"></a>5.1 构造方法概述【理解】</h3><p>构造方法是一种特殊的方法<br>作用：创建对象 Student stu = new Student();<br>格式：<br>public class 类名{<br>    修饰符 类名( 参数 ) {<br>    }<br>}<br>功能：主要是完成对象数据的初始化<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参构造方法"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2-构造方法的注意事项【理解】"><a href="#5-2-构造方法的注意事项【理解】" class="headerlink" title="5.2 构造方法的注意事项【理解】"></a>5.2 构造方法的注意事项【理解】</h3><p>构造方法的创建</p>
<p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法 如果定义了构造方法，系统将不再提供默认的构造</p>
<p>方法</p>
<p>构造方法的重载<br>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p>
<p>推荐的使用方式<br>无论是否使用，都手工书写无参数构造方法</p>
<p>重要功能！<br>可以使用带参构造，为成员变量进行初始化</p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name)</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(int age)</span></span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="number">30</span>);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name,int age)</span></span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>,<span class="number">30</span>);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-3-标准类制作【应用】"><a href="#5-3-标准类制作【应用】" class="headerlink" title="5.3 标准类制作【应用】"></a>5.3 标准类制作【应用】</h3><p>需求：定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象并为其成员变量赋值的两种方式</span></span><br><span class="line"><span class="comment">        1:无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line"><span class="comment">        2:使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">        s1.setAge(<span class="number">30</span>);</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用带参构造方法直接创建带有属性值的对象  </span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"林青霞"</span>,<span class="number">30</span>);</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>7.4 封装</title>
    <url>/2020/06/24/7.4%20%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-private关键字【理解】"><a href="#4-1-private关键字【理解】" class="headerlink" title="4.1 private关键字【理解】"></a>4.1 private关键字【理解】</h3><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）<br>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作<br>    提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰<br>    提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"你给的年龄有误"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">        &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">"林青霞"</span>;</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用show方法</span></span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-2-private的使用【应用】"><a href="#4-2-private的使用【应用】" class="headerlink" title="4.2 private的使用【应用】"></a>4.2 private的使用【应用】</h3><p>需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出 林青霞，30</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用set方法给成员变量赋值</span></span><br><span class="line">        s.setName(<span class="string">"林青霞"</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用get方法获取成员变量的值</span></span><br><span class="line">        System.out.println(s.getName() + <span class="string">"---"</span> + s.getAge());</span><br><span class="line">        System.out.println(s.getName() + <span class="string">","</span> + s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-3-this关键字【应用】"><a href="#4-3-this关键字【应用】" class="headerlink" title="4.3 this关键字【应用】"></a>4.3 this关键字【应用】</h3><p>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）<br>    方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量<br>    方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">","</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-this内存原理【理解】"><a href="#4-4-this内存原理【理解】" class="headerlink" title="4.4 this内存原理【理解】"></a>4.4 this内存原理【理解】</h3><p>this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象<br>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">"林青霞"</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setName(<span class="string">"张曼玉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-封装思想【理解】"><a href="#4-5-封装思想【理解】" class="headerlink" title="4.5 封装思想【理解】"></a>4.5 封装思想【理解】</h3><ol>
<li>封装概述 是面向对象三大特征之一（封装，继承，多态） 是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</li>
<li>封装原则 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 成员变量private，提供对应的getXxx()/setXxx()方法</li>
<li>封装好处 通过方法来控制成员变量的操作，提高了代码的安全性 把代码用方法进行封装，提高了代码的复用性</li>
</ol>
]]></content>
  </entry>
</search>
